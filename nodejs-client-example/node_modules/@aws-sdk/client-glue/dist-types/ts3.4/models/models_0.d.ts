import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { GlueServiceException as __BaseException } from "./GlueServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface NotificationProperty {
  NotifyDelayAfter?: number;
}
export interface Action {
  JobName?: string;
  Arguments?: Record<string, string>;
  Timeout?: number;
  SecurityConfiguration?: string;
  NotificationProperty?: NotificationProperty;
  CrawlerName?: string;
}
export declare enum AggFunction {
  avg = "avg",
  count = "count",
  countDistinct = "countDistinct",
  first = "first",
  kurtosis = "kurtosis",
  last = "last",
  max = "max",
  min = "min",
  skewness = "skewness",
  stddev_pop = "stddev_pop",
  stddev_samp = "stddev_samp",
  sum = "sum",
  sumDistinct = "sumDistinct",
  var_pop = "var_pop",
  var_samp = "var_samp",
}
export interface AggregateOperation {
  Column: string[] | undefined;
  AggFunc: AggFunction | string | undefined;
}
export interface Aggregate {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Groups: string[][] | undefined;
  Aggs: AggregateOperation[] | undefined;
}
export declare class AlreadyExistsException extends __BaseException {
  readonly name: "AlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>
  );
}
export interface GlueStudioSchemaColumn {
  Name: string | undefined;
  Type?: string;
}
export interface GlueSchema {
  Columns?: GlueStudioSchemaColumn[];
}
export interface AthenaConnectorSource {
  Name: string | undefined;
  ConnectionName: string | undefined;
  ConnectorName: string | undefined;
  ConnectionType: string | undefined;
  ConnectionTable?: string;
  SchemaName: string | undefined;
  OutputSchemas?: GlueSchema[];
}
export interface AuditContext {
  AdditionalAuditContext?: string;
  RequestedColumns?: string[];
  AllColumnsRequested?: boolean;
}
export interface Column {
  Name: string | undefined;
  Type?: string;
  Comment?: string;
  Parameters?: Record<string, string>;
}
export interface SchemaId {
  SchemaArn?: string;
  SchemaName?: string;
  RegistryName?: string;
}
export interface SchemaReference {
  SchemaId?: SchemaId;
  SchemaVersionId?: string;
  SchemaVersionNumber?: number;
}
export interface SerDeInfo {
  Name?: string;
  SerializationLibrary?: string;
  Parameters?: Record<string, string>;
}
export interface SkewedInfo {
  SkewedColumnNames?: string[];
  SkewedColumnValues?: string[];
  SkewedColumnValueLocationMaps?: Record<string, string>;
}
export interface Order {
  Column: string | undefined;
  SortOrder: number | undefined;
}
export interface StorageDescriptor {
  Columns?: Column[];
  Location?: string;
  AdditionalLocations?: string[];
  InputFormat?: string;
  OutputFormat?: string;
  Compressed?: boolean;
  NumberOfBuckets?: number;
  SerdeInfo?: SerDeInfo;
  BucketColumns?: string[];
  SortColumns?: Order[];
  Parameters?: Record<string, string>;
  SkewedInfo?: SkewedInfo;
  StoredAsSubDirectories?: boolean;
  SchemaReference?: SchemaReference;
}
export interface PartitionInput {
  Values?: string[];
  LastAccessTime?: Date;
  StorageDescriptor?: StorageDescriptor;
  Parameters?: Record<string, string>;
  LastAnalyzedTime?: Date;
}
export interface BatchCreatePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionInputList: PartitionInput[] | undefined;
}
export interface ErrorDetail {
  ErrorCode?: string;
  ErrorMessage?: string;
}
export interface PartitionError {
  PartitionValues?: string[];
  ErrorDetail?: ErrorDetail;
}
export interface BatchCreatePartitionResponse {
  Errors?: PartitionError[];
}
export declare class EntityNotFoundException extends __BaseException {
  readonly name: "EntityNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<EntityNotFoundException, __BaseException>
  );
}
export declare class GlueEncryptionException extends __BaseException {
  readonly name: "GlueEncryptionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<GlueEncryptionException, __BaseException>
  );
}
export declare class InternalServiceException extends __BaseException {
  readonly name: "InternalServiceException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServiceException, __BaseException>
  );
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export declare class OperationTimeoutException extends __BaseException {
  readonly name: "OperationTimeoutException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OperationTimeoutException, __BaseException>
  );
}
export declare class ResourceNumberLimitExceededException extends __BaseException {
  readonly name: "ResourceNumberLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ResourceNumberLimitExceededException,
      __BaseException
    >
  );
}
export interface BatchDeleteConnectionRequest {
  CatalogId?: string;
  ConnectionNameList: string[] | undefined;
}
export interface BatchDeleteConnectionResponse {
  Succeeded?: string[];
  Errors?: Record<string, ErrorDetail>;
}
export interface PartitionValueList {
  Values: string[] | undefined;
}
export interface BatchDeletePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionsToDelete: PartitionValueList[] | undefined;
}
export interface BatchDeletePartitionResponse {
  Errors?: PartitionError[];
}
export interface BatchDeleteTableRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TablesToDelete: string[] | undefined;
  TransactionId?: string;
}
export interface TableError {
  TableName?: string;
  ErrorDetail?: ErrorDetail;
}
export interface BatchDeleteTableResponse {
  Errors?: TableError[];
}
export declare class ResourceNotReadyException extends __BaseException {
  readonly name: "ResourceNotReadyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotReadyException, __BaseException>
  );
}
export interface BatchDeleteTableVersionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  VersionIds: string[] | undefined;
}
export interface TableVersionError {
  TableName?: string;
  VersionId?: string;
  ErrorDetail?: ErrorDetail;
}
export interface BatchDeleteTableVersionResponse {
  Errors?: TableVersionError[];
}
export interface BatchGetBlueprintsRequest {
  Names: string[] | undefined;
  IncludeBlueprint?: boolean;
  IncludeParameterSpec?: boolean;
}
export interface LastActiveDefinition {
  Description?: string;
  LastModifiedOn?: Date;
  ParameterSpec?: string;
  BlueprintLocation?: string;
  BlueprintServiceLocation?: string;
}
export declare enum BlueprintStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  FAILED = "FAILED",
  UPDATING = "UPDATING",
}
export interface Blueprint {
  Name?: string;
  Description?: string;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  ParameterSpec?: string;
  BlueprintLocation?: string;
  BlueprintServiceLocation?: string;
  Status?: BlueprintStatus | string;
  ErrorMessage?: string;
  LastActiveDefinition?: LastActiveDefinition;
}
export interface BatchGetBlueprintsResponse {
  Blueprints?: Blueprint[];
  MissingBlueprints?: string[];
}
export interface BatchGetCrawlersRequest {
  CrawlerNames: string[] | undefined;
}
export interface LakeFormationConfiguration {
  UseLakeFormationCredentials?: boolean;
  AccountId?: string;
}
export declare enum LastCrawlStatus {
  CANCELLED = "CANCELLED",
  FAILED = "FAILED",
  SUCCEEDED = "SUCCEEDED",
}
export interface LastCrawlInfo {
  Status?: LastCrawlStatus | string;
  ErrorMessage?: string;
  LogGroup?: string;
  LogStream?: string;
  MessagePrefix?: string;
  StartTime?: Date;
}
export declare enum CrawlerLineageSettings {
  DISABLE = "DISABLE",
  ENABLE = "ENABLE",
}
export interface LineageConfiguration {
  CrawlerLineageSettings?: CrawlerLineageSettings | string;
}
export declare enum RecrawlBehavior {
  CRAWL_EVENT_MODE = "CRAWL_EVENT_MODE",
  CRAWL_EVERYTHING = "CRAWL_EVERYTHING",
  CRAWL_NEW_FOLDERS_ONLY = "CRAWL_NEW_FOLDERS_ONLY",
}
export interface RecrawlPolicy {
  RecrawlBehavior?: RecrawlBehavior | string;
}
export declare enum ScheduleState {
  NOT_SCHEDULED = "NOT_SCHEDULED",
  SCHEDULED = "SCHEDULED",
  TRANSITIONING = "TRANSITIONING",
}
export interface Schedule {
  ScheduleExpression?: string;
  State?: ScheduleState | string;
}
export declare enum DeleteBehavior {
  DELETE_FROM_DATABASE = "DELETE_FROM_DATABASE",
  DEPRECATE_IN_DATABASE = "DEPRECATE_IN_DATABASE",
  LOG = "LOG",
}
export declare enum UpdateBehavior {
  LOG = "LOG",
  UPDATE_IN_DATABASE = "UPDATE_IN_DATABASE",
}
export interface SchemaChangePolicy {
  UpdateBehavior?: UpdateBehavior | string;
  DeleteBehavior?: DeleteBehavior | string;
}
export declare enum CrawlerState {
  READY = "READY",
  RUNNING = "RUNNING",
  STOPPING = "STOPPING",
}
export interface CatalogTarget {
  DatabaseName: string | undefined;
  Tables: string[] | undefined;
  ConnectionName?: string;
  EventQueueArn?: string;
  DlqEventQueueArn?: string;
}
export interface DeltaTarget {
  DeltaTables?: string[];
  ConnectionName?: string;
  WriteManifest?: boolean;
  CreateNativeDeltaTable?: boolean;
}
export interface DynamoDBTarget {
  Path?: string;
  scanAll?: boolean;
  scanRate?: number;
}
export declare enum JdbcMetadataEntry {
  COMMENTS = "COMMENTS",
  RAWTYPES = "RAWTYPES",
}
export interface JdbcTarget {
  ConnectionName?: string;
  Path?: string;
  Exclusions?: string[];
  EnableAdditionalMetadata?: (JdbcMetadataEntry | string)[];
}
export interface MongoDBTarget {
  ConnectionName?: string;
  Path?: string;
  ScanAll?: boolean;
}
export interface S3Target {
  Path?: string;
  Exclusions?: string[];
  ConnectionName?: string;
  SampleSize?: number;
  EventQueueArn?: string;
  DlqEventQueueArn?: string;
}
export interface CrawlerTargets {
  S3Targets?: S3Target[];
  JdbcTargets?: JdbcTarget[];
  MongoDBTargets?: MongoDBTarget[];
  DynamoDBTargets?: DynamoDBTarget[];
  CatalogTargets?: CatalogTarget[];
  DeltaTargets?: DeltaTarget[];
}
export interface Crawler {
  Name?: string;
  Role?: string;
  Targets?: CrawlerTargets;
  DatabaseName?: string;
  Description?: string;
  Classifiers?: string[];
  RecrawlPolicy?: RecrawlPolicy;
  SchemaChangePolicy?: SchemaChangePolicy;
  LineageConfiguration?: LineageConfiguration;
  State?: CrawlerState | string;
  TablePrefix?: string;
  Schedule?: Schedule;
  CrawlElapsedTime?: number;
  CreationTime?: Date;
  LastUpdated?: Date;
  LastCrawl?: LastCrawlInfo;
  Version?: number;
  Configuration?: string;
  CrawlerSecurityConfiguration?: string;
  LakeFormationConfiguration?: LakeFormationConfiguration;
}
export interface BatchGetCrawlersResponse {
  Crawlers?: Crawler[];
  CrawlersNotFound?: string[];
}
export interface BatchGetCustomEntityTypesRequest {
  Names: string[] | undefined;
}
export interface CustomEntityType {
  Name: string | undefined;
  RegexString: string | undefined;
  ContextWords?: string[];
}
export interface BatchGetCustomEntityTypesResponse {
  CustomEntityTypes?: CustomEntityType[];
  CustomEntityTypesNotFound?: string[];
}
export interface BatchGetDataQualityResultRequest {
  ResultIds: string[] | undefined;
}
export interface GlueTable {
  DatabaseName: string | undefined;
  TableName: string | undefined;
  CatalogId?: string;
  ConnectionName?: string;
  AdditionalOptions?: Record<string, string>;
}
export interface DataSource {
  GlueTable: GlueTable | undefined;
}
export declare enum DataQualityRuleResultStatus {
  ERROR = "ERROR",
  FAIL = "FAIL",
  PASS = "PASS",
}
export interface DataQualityRuleResult {
  Name?: string;
  Description?: string;
  EvaluationMessage?: string;
  Result?: DataQualityRuleResultStatus | string;
}
export interface DataQualityResult {
  ResultId?: string;
  Score?: number;
  DataSource?: DataSource;
  RulesetName?: string;
  EvaluationContext?: string;
  StartedOn?: Date;
  CompletedOn?: Date;
  JobName?: string;
  JobRunId?: string;
  RulesetEvaluationRunId?: string;
  RuleResults?: DataQualityRuleResult[];
}
export interface BatchGetDataQualityResultResponse {
  Results: DataQualityResult[] | undefined;
  ResultsNotFound?: string[];
}
export interface BatchGetDevEndpointsRequest {
  DevEndpointNames: string[] | undefined;
}
export declare enum WorkerType {
  G_025X = "G.025X",
  G_1X = "G.1X",
  G_2X = "G.2X",
  Standard = "Standard",
}
export interface DevEndpoint {
  EndpointName?: string;
  RoleArn?: string;
  SecurityGroupIds?: string[];
  SubnetId?: string;
  YarnEndpointAddress?: string;
  PrivateAddress?: string;
  ZeppelinRemoteSparkInterpreterPort?: number;
  PublicAddress?: string;
  Status?: string;
  WorkerType?: WorkerType | string;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  NumberOfNodes?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
  FailureReason?: string;
  LastUpdateStatus?: string;
  CreatedTimestamp?: Date;
  LastModifiedTimestamp?: Date;
  PublicKey?: string;
  PublicKeys?: string[];
  SecurityConfiguration?: string;
  Arguments?: Record<string, string>;
}
export interface BatchGetDevEndpointsResponse {
  DevEndpoints?: DevEndpoint[];
  DevEndpointsNotFound?: string[];
}
export interface BatchGetJobsRequest {
  JobNames: string[] | undefined;
}
export interface CatalogHudiSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  AdditionalHudiOptions?: Record<string, string>;
  OutputSchemas?: GlueSchema[];
}
export interface StreamingDataPreviewOptions {
  PollingTime?: number;
  RecordPollingLimit?: number;
}
export interface KafkaStreamingSourceOptions {
  BootstrapServers?: string;
  SecurityProtocol?: string;
  ConnectionName?: string;
  TopicName?: string;
  Assign?: string;
  SubscribePattern?: string;
  Classification?: string;
  Delimiter?: string;
  StartingOffsets?: string;
  EndingOffsets?: string;
  PollTimeoutMs?: number;
  NumRetries?: number;
  RetryIntervalMs?: number;
  MaxOffsetsPerTrigger?: number;
  MinPartitions?: number;
  IncludeHeaders?: boolean;
  AddRecordTimestamp?: string;
  EmitConsumerLagMetrics?: string;
}
export interface CatalogKafkaSource {
  Name: string | undefined;
  WindowSize?: number;
  DetectSchema?: boolean;
  Table: string | undefined;
  Database: string | undefined;
  StreamingOptions?: KafkaStreamingSourceOptions;
  DataPreviewOptions?: StreamingDataPreviewOptions;
}
export declare enum StartingPosition {
  EARLIEST = "earliest",
  LATEST = "latest",
  TRIM_HORIZON = "trim_horizon",
}
export interface KinesisStreamingSourceOptions {
  EndpointUrl?: string;
  StreamName?: string;
  Classification?: string;
  Delimiter?: string;
  StartingPosition?: StartingPosition | string;
  MaxFetchTimeInMs?: number;
  MaxFetchRecordsPerShard?: number;
  MaxRecordPerRead?: number;
  AddIdleTimeBetweenReads?: boolean;
  IdleTimeBetweenReadsInMs?: number;
  DescribeShardInterval?: number;
  NumRetries?: number;
  RetryIntervalMs?: number;
  MaxRetryIntervalMs?: number;
  AvoidEmptyBatches?: boolean;
  StreamArn?: string;
  RoleArn?: string;
  RoleSessionName?: string;
  AddRecordTimestamp?: string;
  EmitConsumerLagMetrics?: string;
}
export interface CatalogKinesisSource {
  Name: string | undefined;
  WindowSize?: number;
  DetectSchema?: boolean;
  Table: string | undefined;
  Database: string | undefined;
  StreamingOptions?: KinesisStreamingSourceOptions;
  DataPreviewOptions?: StreamingDataPreviewOptions;
}
export interface CatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface BasicCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface CustomCode {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Code: string | undefined;
  ClassName: string | undefined;
  OutputSchemas?: GlueSchema[];
}
export declare enum JDBCConnectionType {
  mysql = "mysql",
  oracle = "oracle",
  postgresql = "postgresql",
  redshift = "redshift",
  sqlserver = "sqlserver",
}
export interface DirectJDBCSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  ConnectionName: string | undefined;
  ConnectionType: JDBCConnectionType | string | undefined;
  RedshiftTmpDir?: string;
}
export interface DirectKafkaSource {
  Name: string | undefined;
  StreamingOptions?: KafkaStreamingSourceOptions;
  WindowSize?: number;
  DetectSchema?: boolean;
  DataPreviewOptions?: StreamingDataPreviewOptions;
}
export interface DirectKinesisSource {
  Name: string | undefined;
  WindowSize?: number;
  DetectSchema?: boolean;
  StreamingOptions?: KinesisStreamingSourceOptions;
  DataPreviewOptions?: StreamingDataPreviewOptions;
}
export interface DropDuplicates {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Columns?: string[][];
}
export interface DropFields {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Paths: string[][] | undefined;
}
export interface NullCheckBoxList {
  IsEmpty?: boolean;
  IsNullString?: boolean;
  IsNegOne?: boolean;
}
export interface Datatype {
  Id: string | undefined;
  Label: string | undefined;
}
export interface NullValueField {
  Value: string | undefined;
  Datatype: Datatype | undefined;
}
export interface DropNullFields {
  Name: string | undefined;
  Inputs: string[] | undefined;
  NullCheckBoxList?: NullCheckBoxList;
  NullTextList?: NullValueField[];
}
export declare enum ParamType {
  BOOL = "bool",
  COMPLEX = "complex",
  FLOAT = "float",
  INT = "int",
  LIST = "list",
  NULL = "null",
  STR = "str",
}
export interface TransformConfigParameter {
  Name: string | undefined;
  Type: ParamType | string | undefined;
  ValidationRule?: string;
  ValidationMessage?: string;
  Value?: string[];
  ListType?: ParamType | string;
  IsOptional?: boolean;
}
export interface DynamicTransform {
  Name: string | undefined;
  TransformName: string | undefined;
  Inputs: string[] | undefined;
  Parameters?: TransformConfigParameter[];
  FunctionName: string | undefined;
  Path: string | undefined;
  Version?: string;
}
export interface DynamoDBCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export declare enum DQTransformOutput {
  EvaluationResults = "EvaluationResults",
  PrimaryInput = "PrimaryInput",
}
export interface DQResultsPublishingOptions {
  EvaluationContext?: string;
  ResultsS3Prefix?: string;
  CloudWatchMetricsEnabled?: boolean;
  ResultsPublishingEnabled?: boolean;
}
export declare enum DQStopJobOnFailureTiming {
  AfterDataLoad = "AfterDataLoad",
  Immediate = "Immediate",
}
export interface DQStopJobOnFailureOptions {
  StopJobOnFailureTiming?: DQStopJobOnFailureTiming | string;
}
export interface EvaluateDataQuality {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Ruleset: string | undefined;
  Output?: DQTransformOutput | string;
  PublishingOptions?: DQResultsPublishingOptions;
  StopJobOnFailureOptions?: DQStopJobOnFailureOptions;
}
export interface FillMissingValues {
  Name: string | undefined;
  Inputs: string[] | undefined;
  ImputedPath: string | undefined;
  FilledPath?: string;
}
export declare enum FilterOperation {
  EQ = "EQ",
  GT = "GT",
  GTE = "GTE",
  ISNULL = "ISNULL",
  LT = "LT",
  LTE = "LTE",
  REGEX = "REGEX",
}
export declare enum FilterValueType {
  COLUMNEXTRACTED = "COLUMNEXTRACTED",
  CONSTANT = "CONSTANT",
}
export interface FilterValue {
  Type: FilterValueType | string | undefined;
  Value: string[] | undefined;
}
export interface FilterExpression {
  Operation: FilterOperation | string | undefined;
  Negated?: boolean;
  Values: FilterValue[] | undefined;
}
export declare enum FilterLogicalOperator {
  AND = "AND",
  OR = "OR",
}
export interface Filter {
  Name: string | undefined;
  Inputs: string[] | undefined;
  LogicalOperator: FilterLogicalOperator | string | undefined;
  Filters: FilterExpression[] | undefined;
}
export interface S3SourceAdditionalOptions {
  BoundedSize?: number;
  BoundedFiles?: number;
}
export interface GovernedCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  PartitionPredicate?: string;
  AdditionalOptions?: S3SourceAdditionalOptions;
}
export declare enum UpdateCatalogBehavior {
  LOG = "LOG",
  UPDATE_IN_DATABASE = "UPDATE_IN_DATABASE",
}
export interface CatalogSchemaChangePolicy {
  EnableUpdateCatalog?: boolean;
  UpdateBehavior?: UpdateCatalogBehavior | string;
}
export interface GovernedCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PartitionKeys?: string[][];
  Table: string | undefined;
  Database: string | undefined;
  SchemaChangePolicy?: CatalogSchemaChangePolicy;
}
export declare enum JDBCDataType {
  ARRAY = "ARRAY",
  BIGINT = "BIGINT",
  BINARY = "BINARY",
  BIT = "BIT",
  BLOB = "BLOB",
  BOOLEAN = "BOOLEAN",
  CHAR = "CHAR",
  CLOB = "CLOB",
  DATALINK = "DATALINK",
  DATE = "DATE",
  DECIMAL = "DECIMAL",
  DISTINCT = "DISTINCT",
  DOUBLE = "DOUBLE",
  FLOAT = "FLOAT",
  INTEGER = "INTEGER",
  JAVA_OBJECT = "JAVA_OBJECT",
  LONGNVARCHAR = "LONGNVARCHAR",
  LONGVARBINARY = "LONGVARBINARY",
  LONGVARCHAR = "LONGVARCHAR",
  NCHAR = "NCHAR",
  NCLOB = "NCLOB",
  NULL = "NULL",
  NUMERIC = "NUMERIC",
  NVARCHAR = "NVARCHAR",
  OTHER = "OTHER",
  REAL = "REAL",
  REF = "REF",
  REF_CURSOR = "REF_CURSOR",
  ROWID = "ROWID",
  SMALLINT = "SMALLINT",
  SQLXML = "SQLXML",
  STRUCT = "STRUCT",
  TIME = "TIME",
  TIMESTAMP = "TIMESTAMP",
  TIMESTAMP_WITH_TIMEZONE = "TIMESTAMP_WITH_TIMEZONE",
  TIME_WITH_TIMEZONE = "TIME_WITH_TIMEZONE",
  TINYINT = "TINYINT",
  VARBINARY = "VARBINARY",
  VARCHAR = "VARCHAR",
}
export declare enum GlueRecordType {
  BIGDECIMAL = "BIGDECIMAL",
  BYTE = "BYTE",
  DATE = "DATE",
  DOUBLE = "DOUBLE",
  FLOAT = "FLOAT",
  INT = "INT",
  LONG = "LONG",
  SHORT = "SHORT",
  STRING = "STRING",
  TIMESTAMP = "TIMESTAMP",
}
export interface JDBCConnectorOptions {
  FilterPredicate?: string;
  PartitionColumn?: string;
  LowerBound?: number;
  UpperBound?: number;
  NumPartitions?: number;
  JobBookmarkKeys?: string[];
  JobBookmarkKeysSortOrder?: string;
  DataTypeMapping?: Record<string, GlueRecordType | string>;
}
export interface JDBCConnectorSource {
  Name: string | undefined;
  ConnectionName: string | undefined;
  ConnectorName: string | undefined;
  ConnectionType: string | undefined;
  AdditionalOptions?: JDBCConnectorOptions;
  ConnectionTable?: string;
  Query?: string;
  OutputSchemas?: GlueSchema[];
}
export interface JDBCConnectorTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  ConnectionName: string | undefined;
  ConnectionTable: string | undefined;
  ConnectorName: string | undefined;
  ConnectionType: string | undefined;
  AdditionalOptions?: Record<string, string>;
  OutputSchemas?: GlueSchema[];
}
export interface JoinColumn {
  From: string | undefined;
  Keys: string[][] | undefined;
}
export declare enum JoinType {
  EQUIJOIN = "equijoin",
  LEFT = "left",
  LEFT_ANTI = "leftanti",
  LEFT_SEMI = "leftsemi",
  OUTER = "outer",
  RIGHT = "right",
}
export interface Join {
  Name: string | undefined;
  Inputs: string[] | undefined;
  JoinType: JoinType | string | undefined;
  Columns: JoinColumn[] | undefined;
}
export interface Merge {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Source: string | undefined;
  PrimaryKeys: string[][] | undefined;
}
export interface MicrosoftSQLServerCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface MicrosoftSQLServerCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface MySQLCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface MySQLCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface OracleSQLCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface OracleSQLCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export declare enum PiiType {
  ColumnAudit = "ColumnAudit",
  ColumnMasking = "ColumnMasking",
  RowAudit = "RowAudit",
  RowMasking = "RowMasking",
}
export interface PIIDetection {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PiiType: PiiType | string | undefined;
  EntityTypesToDetect: string[] | undefined;
  OutputColumnName?: string;
  SampleFraction?: number;
  ThresholdFraction?: number;
  MaskValue?: string;
}
export interface PostgreSQLCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface PostgreSQLCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface RedshiftSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  RedshiftTmpDir?: string;
  TmpDirIAMRole?: string;
}
export interface UpsertRedshiftTargetOptions {
  TableLocation?: string;
  ConnectionName?: string;
  UpsertKeys?: string[];
}
export interface RedshiftTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Database: string | undefined;
  Table: string | undefined;
  RedshiftTmpDir?: string;
  TmpDirIAMRole?: string;
  UpsertRedshiftOptions?: UpsertRedshiftTargetOptions;
}
export interface RelationalCatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
}
export interface RenameField {
  Name: string | undefined;
  Inputs: string[] | undefined;
  SourcePath: string[] | undefined;
  TargetPath: string[] | undefined;
}
export interface S3CatalogHudiSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  AdditionalHudiOptions?: Record<string, string>;
  OutputSchemas?: GlueSchema[];
}
export interface S3CatalogSource {
  Name: string | undefined;
  Database: string | undefined;
  Table: string | undefined;
  PartitionPredicate?: string;
  AdditionalOptions?: S3SourceAdditionalOptions;
}
export interface S3CatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PartitionKeys?: string[][];
  Table: string | undefined;
  Database: string | undefined;
  SchemaChangePolicy?: CatalogSchemaChangePolicy;
}
export interface S3DirectSourceAdditionalOptions {
  BoundedSize?: number;
  BoundedFiles?: number;
  EnableSamplePath?: boolean;
  SamplePath?: string;
}
export declare enum CompressionType {
  BZIP2 = "bzip2",
  GZIP = "gzip",
}
export declare enum QuoteChar {
  DISABLED = "disabled",
  QUILLEMET = "quillemet",
  QUOTE = "quote",
  SINGLE_QUOTE = "single_quote",
}
export declare enum Separator {
  COMMA = "comma",
  CTRLA = "ctrla",
  PIPE = "pipe",
  SEMICOLON = "semicolon",
  TAB = "tab",
}
export interface S3CsvSource {
  Name: string | undefined;
  Paths: string[] | undefined;
  CompressionType?: CompressionType | string;
  Exclusions?: string[];
  GroupSize?: string;
  GroupFiles?: string;
  Recurse?: boolean;
  MaxBand?: number;
  MaxFilesInBand?: number;
  AdditionalOptions?: S3DirectSourceAdditionalOptions;
  Separator: Separator | string | undefined;
  Escaper?: string;
  QuoteChar: QuoteChar | string | undefined;
  Multiline?: boolean;
  WithHeader?: boolean;
  WriteHeader?: boolean;
  SkipFirst?: boolean;
  OptimizePerformance?: boolean;
  OutputSchemas?: GlueSchema[];
}
export declare enum TargetFormat {
  AVRO = "avro",
  CSV = "csv",
  HUDI = "hudi",
  JSON = "json",
  ORC = "orc",
  PARQUET = "parquet",
}
export interface DirectSchemaChangePolicy {
  EnableUpdateCatalog?: boolean;
  UpdateBehavior?: UpdateCatalogBehavior | string;
  Table?: string;
  Database?: string;
}
export interface S3DirectTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PartitionKeys?: string[][];
  Path: string | undefined;
  Compression?: string;
  Format: TargetFormat | string | undefined;
  SchemaChangePolicy?: DirectSchemaChangePolicy;
}
export declare enum ParquetCompressionType {
  GZIP = "gzip",
  LZO = "lzo",
  NONE = "none",
  SNAPPY = "snappy",
  UNCOMPRESSED = "uncompressed",
}
export interface S3GlueParquetTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PartitionKeys?: string[][];
  Path: string | undefined;
  Compression?: ParquetCompressionType | string;
  SchemaChangePolicy?: DirectSchemaChangePolicy;
}
export interface S3HudiCatalogTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  PartitionKeys?: string[][];
  Table: string | undefined;
  Database: string | undefined;
  AdditionalOptions: Record<string, string> | undefined;
  SchemaChangePolicy?: CatalogSchemaChangePolicy;
}
export declare enum HudiTargetCompressionType {
  GZIP = "gzip",
  LZO = "lzo",
  SNAPPY = "snappy",
  UNCOMPRESSED = "uncompressed",
}
export interface S3HudiDirectTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Path: string | undefined;
  Compression: HudiTargetCompressionType | string | undefined;
  PartitionKeys?: string[][];
  Format: TargetFormat | string | undefined;
  AdditionalOptions: Record<string, string> | undefined;
  SchemaChangePolicy?: DirectSchemaChangePolicy;
}
export interface S3HudiSource {
  Name: string | undefined;
  Paths: string[] | undefined;
  AdditionalHudiOptions?: Record<string, string>;
  AdditionalOptions?: S3DirectSourceAdditionalOptions;
  OutputSchemas?: GlueSchema[];
}
export interface S3JsonSource {
  Name: string | undefined;
  Paths: string[] | undefined;
  CompressionType?: CompressionType | string;
  Exclusions?: string[];
  GroupSize?: string;
  GroupFiles?: string;
  Recurse?: boolean;
  MaxBand?: number;
  MaxFilesInBand?: number;
  AdditionalOptions?: S3DirectSourceAdditionalOptions;
  JsonPath?: string;
  Multiline?: boolean;
  OutputSchemas?: GlueSchema[];
}
export interface S3ParquetSource {
  Name: string | undefined;
  Paths: string[] | undefined;
  CompressionType?: ParquetCompressionType | string;
  Exclusions?: string[];
  GroupSize?: string;
  GroupFiles?: string;
  Recurse?: boolean;
  MaxBand?: number;
  MaxFilesInBand?: number;
  AdditionalOptions?: S3DirectSourceAdditionalOptions;
  OutputSchemas?: GlueSchema[];
}
export interface SelectFields {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Paths: string[][] | undefined;
}
export interface SelectFromCollection {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Index: number | undefined;
}
export interface SparkConnectorSource {
  Name: string | undefined;
  ConnectionName: string | undefined;
  ConnectorName: string | undefined;
  ConnectionType: string | undefined;
  AdditionalOptions?: Record<string, string>;
  OutputSchemas?: GlueSchema[];
}
export interface SparkConnectorTarget {
  Name: string | undefined;
  Inputs: string[] | undefined;
  ConnectionName: string | undefined;
  ConnectorName: string | undefined;
  ConnectionType: string | undefined;
  AdditionalOptions?: Record<string, string>;
  OutputSchemas?: GlueSchema[];
}
export interface SqlAlias {
  From: string | undefined;
  Alias: string | undefined;
}
export interface SparkSQL {
  Name: string | undefined;
  Inputs: string[] | undefined;
  SqlQuery: string | undefined;
  SqlAliases: SqlAlias[] | undefined;
  OutputSchemas?: GlueSchema[];
}
export interface Spigot {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Path: string | undefined;
  Topk?: number;
  Prob?: number;
}
export interface SplitFields {
  Name: string | undefined;
  Inputs: string[] | undefined;
  Paths: string[][] | undefined;
}
export declare enum UnionType {
  ALL = "ALL",
  DISTINCT = "DISTINCT",
}
export interface Union {
  Name: string | undefined;
  Inputs: string[] | undefined;
  UnionType: UnionType | string | undefined;
}
export interface JobCommand {
  Name?: string;
  ScriptLocation?: string;
  PythonVersion?: string;
}
export interface ConnectionsList {
  Connections?: string[];
}
export declare enum ExecutionClass {
  FLEX = "FLEX",
  STANDARD = "STANDARD",
}
export interface ExecutionProperty {
  MaxConcurrentRuns?: number;
}
export declare enum SourceControlAuthStrategy {
  AWS_SECRETS_MANAGER = "AWS_SECRETS_MANAGER",
  PERSONAL_ACCESS_TOKEN = "PERSONAL_ACCESS_TOKEN",
}
export declare enum SourceControlProvider {
  AWS_CODE_COMMIT = "AWS_CODE_COMMIT",
  GITHUB = "GITHUB",
}
export interface SourceControlDetails {
  Provider?: SourceControlProvider | string;
  Repository?: string;
  Owner?: string;
  Branch?: string;
  Folder?: string;
  LastCommitId?: string;
  AuthStrategy?: SourceControlAuthStrategy | string;
  AuthToken?: string;
}
export interface BatchGetPartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionsToGet: PartitionValueList[] | undefined;
}
export interface Partition {
  Values?: string[];
  DatabaseName?: string;
  TableName?: string;
  CreationTime?: Date;
  LastAccessTime?: Date;
  StorageDescriptor?: StorageDescriptor;
  Parameters?: Record<string, string>;
  LastAnalyzedTime?: Date;
  CatalogId?: string;
}
export interface BatchGetPartitionResponse {
  Partitions?: Partition[];
  UnprocessedKeys?: PartitionValueList[];
}
export declare class InvalidStateException extends __BaseException {
  readonly name: "InvalidStateException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidStateException, __BaseException>
  );
}
export interface BatchGetTriggersRequest {
  TriggerNames: string[] | undefined;
}
export interface EventBatchingCondition {
  BatchSize: number | undefined;
  BatchWindow?: number;
}
export declare enum CrawlState {
  CANCELLED = "CANCELLED",
  CANCELLING = "CANCELLING",
  ERROR = "ERROR",
  FAILED = "FAILED",
  RUNNING = "RUNNING",
  SUCCEEDED = "SUCCEEDED",
}
export declare enum LogicalOperator {
  EQUALS = "EQUALS",
}
export declare enum JobRunState {
  ERROR = "ERROR",
  FAILED = "FAILED",
  RUNNING = "RUNNING",
  STARTING = "STARTING",
  STOPPED = "STOPPED",
  STOPPING = "STOPPING",
  SUCCEEDED = "SUCCEEDED",
  TIMEOUT = "TIMEOUT",
  WAITING = "WAITING",
}
export interface Condition {
  LogicalOperator?: LogicalOperator | string;
  JobName?: string;
  State?: JobRunState | string;
  CrawlerName?: string;
  CrawlState?: CrawlState | string;
}
export declare enum Logical {
  AND = "AND",
  ANY = "ANY",
}
export interface Predicate {
  Logical?: Logical | string;
  Conditions?: Condition[];
}
export declare enum TriggerState {
  ACTIVATED = "ACTIVATED",
  ACTIVATING = "ACTIVATING",
  CREATED = "CREATED",
  CREATING = "CREATING",
  DEACTIVATED = "DEACTIVATED",
  DEACTIVATING = "DEACTIVATING",
  DELETING = "DELETING",
  UPDATING = "UPDATING",
}
export declare enum TriggerType {
  CONDITIONAL = "CONDITIONAL",
  EVENT = "EVENT",
  ON_DEMAND = "ON_DEMAND",
  SCHEDULED = "SCHEDULED",
}
export interface Trigger {
  Name?: string;
  WorkflowName?: string;
  Id?: string;
  Type?: TriggerType | string;
  State?: TriggerState | string;
  Description?: string;
  Schedule?: string;
  Actions?: Action[];
  Predicate?: Predicate;
  EventBatchingCondition?: EventBatchingCondition;
}
export interface BatchGetTriggersResponse {
  Triggers?: Trigger[];
  TriggersNotFound?: string[];
}
export interface BatchGetWorkflowsRequest {
  Names: string[] | undefined;
  IncludeGraph?: boolean;
}
export interface BlueprintDetails {
  BlueprintName?: string;
  RunId?: string;
}
export interface Edge {
  SourceId?: string;
  DestinationId?: string;
}
export interface Crawl {
  State?: CrawlState | string;
  StartedOn?: Date;
  CompletedOn?: Date;
  ErrorMessage?: string;
  LogGroup?: string;
  LogStream?: string;
}
export interface CrawlerNodeDetails {
  Crawls?: Crawl[];
}
export interface Predecessor {
  JobName?: string;
  RunId?: string;
}
export interface JobRun {
  Id?: string;
  Attempt?: number;
  PreviousRunId?: string;
  TriggerName?: string;
  JobName?: string;
  StartedOn?: Date;
  LastModifiedOn?: Date;
  CompletedOn?: Date;
  JobRunState?: JobRunState | string;
  Arguments?: Record<string, string>;
  ErrorMessage?: string;
  PredecessorRuns?: Predecessor[];
  AllocatedCapacity?: number;
  ExecutionTime?: number;
  Timeout?: number;
  MaxCapacity?: number;
  WorkerType?: WorkerType | string;
  NumberOfWorkers?: number;
  SecurityConfiguration?: string;
  LogGroupName?: string;
  NotificationProperty?: NotificationProperty;
  GlueVersion?: string;
  DPUSeconds?: number;
  ExecutionClass?: ExecutionClass | string;
}
export interface JobNodeDetails {
  JobRuns?: JobRun[];
}
export interface TriggerNodeDetails {
  Trigger?: Trigger;
}
export declare enum NodeType {
  CRAWLER = "CRAWLER",
  JOB = "JOB",
  TRIGGER = "TRIGGER",
}
export interface Node {
  Type?: NodeType | string;
  Name?: string;
  UniqueId?: string;
  TriggerDetails?: TriggerNodeDetails;
  JobDetails?: JobNodeDetails;
  CrawlerDetails?: CrawlerNodeDetails;
}
export interface WorkflowGraph {
  Nodes?: Node[];
  Edges?: Edge[];
}
export interface StartingEventBatchCondition {
  BatchSize?: number;
  BatchWindow?: number;
}
export interface WorkflowRunStatistics {
  TotalActions?: number;
  TimeoutActions?: number;
  FailedActions?: number;
  StoppedActions?: number;
  SucceededActions?: number;
  RunningActions?: number;
  ErroredActions?: number;
  WaitingActions?: number;
}
export declare enum WorkflowRunStatus {
  COMPLETED = "COMPLETED",
  ERROR = "ERROR",
  RUNNING = "RUNNING",
  STOPPED = "STOPPED",
  STOPPING = "STOPPING",
}
export interface WorkflowRun {
  Name?: string;
  WorkflowRunId?: string;
  PreviousRunId?: string;
  WorkflowRunProperties?: Record<string, string>;
  StartedOn?: Date;
  CompletedOn?: Date;
  Status?: WorkflowRunStatus | string;
  ErrorMessage?: string;
  Statistics?: WorkflowRunStatistics;
  Graph?: WorkflowGraph;
  StartingEventBatchCondition?: StartingEventBatchCondition;
}
export interface Workflow {
  Name?: string;
  Description?: string;
  DefaultRunProperties?: Record<string, string>;
  CreatedOn?: Date;
  LastModifiedOn?: Date;
  LastRun?: WorkflowRun;
  Graph?: WorkflowGraph;
  MaxConcurrentRuns?: number;
  BlueprintDetails?: BlueprintDetails;
}
export interface BatchGetWorkflowsResponse {
  Workflows?: Workflow[];
  MissingWorkflows?: string[];
}
export interface BatchStopJobRunRequest {
  JobName: string | undefined;
  JobRunIds: string[] | undefined;
}
export interface BatchStopJobRunError {
  JobName?: string;
  JobRunId?: string;
  ErrorDetail?: ErrorDetail;
}
export interface BatchStopJobRunSuccessfulSubmission {
  JobName?: string;
  JobRunId?: string;
}
export interface BatchStopJobRunResponse {
  SuccessfulSubmissions?: BatchStopJobRunSuccessfulSubmission[];
  Errors?: BatchStopJobRunError[];
}
export interface BatchUpdatePartitionRequestEntry {
  PartitionValueList: string[] | undefined;
  PartitionInput: PartitionInput | undefined;
}
export interface BatchUpdatePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  Entries: BatchUpdatePartitionRequestEntry[] | undefined;
}
export interface BatchUpdatePartitionFailureEntry {
  PartitionValueList?: string[];
  ErrorDetail?: ErrorDetail;
}
export interface BatchUpdatePartitionResponse {
  Errors?: BatchUpdatePartitionFailureEntry[];
}
export interface CancelDataQualityRuleRecommendationRunRequest {
  RunId: string | undefined;
}
export interface CancelDataQualityRuleRecommendationRunResponse {}
export interface CancelDataQualityRulesetEvaluationRunRequest {
  RunId: string | undefined;
}
export interface CancelDataQualityRulesetEvaluationRunResponse {}
export interface CancelMLTaskRunRequest {
  TransformId: string | undefined;
  TaskRunId: string | undefined;
}
export declare enum TaskStatusType {
  FAILED = "FAILED",
  RUNNING = "RUNNING",
  STARTING = "STARTING",
  STOPPED = "STOPPED",
  STOPPING = "STOPPING",
  SUCCEEDED = "SUCCEEDED",
  TIMEOUT = "TIMEOUT",
}
export interface CancelMLTaskRunResponse {
  TransformId?: string;
  TaskRunId?: string;
  Status?: TaskStatusType | string;
}
export interface CancelStatementRequest {
  SessionId: string | undefined;
  Id: number | undefined;
  RequestOrigin?: string;
}
export interface CancelStatementResponse {}
export declare class IllegalSessionStateException extends __BaseException {
  readonly name: "IllegalSessionStateException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<IllegalSessionStateException, __BaseException>
  );
}
export declare enum DataFormat {
  AVRO = "AVRO",
  JSON = "JSON",
  PROTOBUF = "PROTOBUF",
}
export interface CheckSchemaVersionValidityInput {
  DataFormat: DataFormat | string | undefined;
  SchemaDefinition: string | undefined;
}
export interface CheckSchemaVersionValidityResponse {
  Valid?: boolean;
  Error?: string;
}
export interface CreateBlueprintRequest {
  Name: string | undefined;
  Description?: string;
  BlueprintLocation: string | undefined;
  Tags?: Record<string, string>;
}
export interface CreateBlueprintResponse {
  Name?: string;
}
export declare enum CsvHeaderOption {
  ABSENT = "ABSENT",
  PRESENT = "PRESENT",
  UNKNOWN = "UNKNOWN",
}
export interface CreateCsvClassifierRequest {
  Name: string | undefined;
  Delimiter?: string;
  QuoteSymbol?: string;
  ContainsHeader?: CsvHeaderOption | string;
  Header?: string[];
  DisableValueTrimming?: boolean;
  AllowSingleColumn?: boolean;
  CustomDatatypeConfigured?: boolean;
  CustomDatatypes?: string[];
}
export interface CreateGrokClassifierRequest {
  Classification: string | undefined;
  Name: string | undefined;
  GrokPattern: string | undefined;
  CustomPatterns?: string;
}
export interface CreateJsonClassifierRequest {
  Name: string | undefined;
  JsonPath: string | undefined;
}
export interface CreateXMLClassifierRequest {
  Classification: string | undefined;
  Name: string | undefined;
  RowTag?: string;
}
export interface CreateClassifierRequest {
  GrokClassifier?: CreateGrokClassifierRequest;
  XMLClassifier?: CreateXMLClassifierRequest;
  JsonClassifier?: CreateJsonClassifierRequest;
  CsvClassifier?: CreateCsvClassifierRequest;
}
export interface CreateClassifierResponse {}
export declare enum ConnectionPropertyKey {
  CONFIG_FILES = "CONFIG_FILES",
  CONNECTION_URL = "CONNECTION_URL",
  CONNECTOR_CLASS_NAME = "CONNECTOR_CLASS_NAME",
  CONNECTOR_TYPE = "CONNECTOR_TYPE",
  CONNECTOR_URL = "CONNECTOR_URL",
  CUSTOM_JDBC_CERT = "CUSTOM_JDBC_CERT",
  CUSTOM_JDBC_CERT_STRING = "CUSTOM_JDBC_CERT_STRING",
  ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD = "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD",
  ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD = "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD",
  ENCRYPTED_PASSWORD = "ENCRYPTED_PASSWORD",
  HOST = "HOST",
  INSTANCE_ID = "INSTANCE_ID",
  JDBC_CONNECTION_URL = "JDBC_CONNECTION_URL",
  JDBC_DRIVER_CLASS_NAME = "JDBC_DRIVER_CLASS_NAME",
  JDBC_DRIVER_JAR_URI = "JDBC_DRIVER_JAR_URI",
  JDBC_ENFORCE_SSL = "JDBC_ENFORCE_SSL",
  JDBC_ENGINE = "JDBC_ENGINE",
  JDBC_ENGINE_VERSION = "JDBC_ENGINE_VERSION",
  KAFKA_BOOTSTRAP_SERVERS = "KAFKA_BOOTSTRAP_SERVERS",
  KAFKA_CLIENT_KEYSTORE = "KAFKA_CLIENT_KEYSTORE",
  KAFKA_CLIENT_KEYSTORE_PASSWORD = "KAFKA_CLIENT_KEYSTORE_PASSWORD",
  KAFKA_CLIENT_KEY_PASSWORD = "KAFKA_CLIENT_KEY_PASSWORD",
  KAFKA_CUSTOM_CERT = "KAFKA_CUSTOM_CERT",
  KAFKA_SKIP_CUSTOM_CERT_VALIDATION = "KAFKA_SKIP_CUSTOM_CERT_VALIDATION",
  KAFKA_SSL_ENABLED = "KAFKA_SSL_ENABLED",
  PASSWORD = "PASSWORD",
  PORT = "PORT",
  SECRET_ID = "SECRET_ID",
  SKIP_CUSTOM_JDBC_CERT_VALIDATION = "SKIP_CUSTOM_JDBC_CERT_VALIDATION",
  USER_NAME = "USERNAME",
}
export declare enum ConnectionType {
  CUSTOM = "CUSTOM",
  JDBC = "JDBC",
  KAFKA = "KAFKA",
  MARKETPLACE = "MARKETPLACE",
  MONGODB = "MONGODB",
  NETWORK = "NETWORK",
  SFTP = "SFTP",
}
export interface PhysicalConnectionRequirements {
  SubnetId?: string;
  SecurityGroupIdList?: string[];
  AvailabilityZone?: string;
}
export interface ConnectionInput {
  Name: string | undefined;
  Description?: string;
  ConnectionType: ConnectionType | string | undefined;
  MatchCriteria?: string[];
  ConnectionProperties: Record<string, string> | undefined;
  PhysicalConnectionRequirements?: PhysicalConnectionRequirements;
}
export interface CreateConnectionRequest {
  CatalogId?: string;
  ConnectionInput: ConnectionInput | undefined;
  Tags?: Record<string, string>;
}
export interface CreateConnectionResponse {}
export interface CreateCrawlerRequest {
  Name: string | undefined;
  Role: string | undefined;
  DatabaseName?: string;
  Description?: string;
  Targets: CrawlerTargets | undefined;
  Schedule?: string;
  Classifiers?: string[];
  TablePrefix?: string;
  SchemaChangePolicy?: SchemaChangePolicy;
  RecrawlPolicy?: RecrawlPolicy;
  LineageConfiguration?: LineageConfiguration;
  LakeFormationConfiguration?: LakeFormationConfiguration;
  Configuration?: string;
  CrawlerSecurityConfiguration?: string;
  Tags?: Record<string, string>;
}
export interface CreateCrawlerResponse {}
export interface CreateCustomEntityTypeRequest {
  Name: string | undefined;
  RegexString: string | undefined;
  ContextWords?: string[];
}
export interface CreateCustomEntityTypeResponse {
  Name?: string;
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export declare enum Permission {
  ALL = "ALL",
  ALTER = "ALTER",
  CREATE_DATABASE = "CREATE_DATABASE",
  CREATE_TABLE = "CREATE_TABLE",
  DATA_LOCATION_ACCESS = "DATA_LOCATION_ACCESS",
  DELETE = "DELETE",
  DROP = "DROP",
  INSERT = "INSERT",
  SELECT = "SELECT",
}
export interface DataLakePrincipal {
  DataLakePrincipalIdentifier?: string;
}
export interface PrincipalPermissions {
  Principal?: DataLakePrincipal;
  Permissions?: (Permission | string)[];
}
export interface DatabaseIdentifier {
  CatalogId?: string;
  DatabaseName?: string;
}
export interface DatabaseInput {
  Name: string | undefined;
  Description?: string;
  LocationUri?: string;
  Parameters?: Record<string, string>;
  CreateTableDefaultPermissions?: PrincipalPermissions[];
  TargetDatabase?: DatabaseIdentifier;
}
export interface CreateDatabaseRequest {
  CatalogId?: string;
  DatabaseInput: DatabaseInput | undefined;
  Tags?: Record<string, string>;
}
export interface CreateDatabaseResponse {}
export interface DataQualityTargetTable {
  TableName: string | undefined;
  DatabaseName: string | undefined;
}
export interface CreateDataQualityRulesetRequest {
  Name: string | undefined;
  Description?: string;
  Ruleset: string | undefined;
  Tags?: Record<string, string>;
  TargetTable?: DataQualityTargetTable;
  ClientToken?: string;
}
export interface CreateDataQualityRulesetResponse {
  Name?: string;
}
export interface CreateDevEndpointRequest {
  EndpointName: string | undefined;
  RoleArn: string | undefined;
  SecurityGroupIds?: string[];
  SubnetId?: string;
  PublicKey?: string;
  PublicKeys?: string[];
  NumberOfNodes?: number;
  WorkerType?: WorkerType | string;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
  SecurityConfiguration?: string;
  Tags?: Record<string, string>;
  Arguments?: Record<string, string>;
}
export interface CreateDevEndpointResponse {
  EndpointName?: string;
  Status?: string;
  SecurityGroupIds?: string[];
  SubnetId?: string;
  RoleArn?: string;
  YarnEndpointAddress?: string;
  ZeppelinRemoteSparkInterpreterPort?: number;
  NumberOfNodes?: number;
  WorkerType?: WorkerType | string;
  GlueVersion?: string;
  NumberOfWorkers?: number;
  AvailabilityZone?: string;
  VpcId?: string;
  ExtraPythonLibsS3Path?: string;
  ExtraJarsS3Path?: string;
  FailureReason?: string;
  SecurityConfiguration?: string;
  CreatedTimestamp?: Date;
  Arguments?: Record<string, string>;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CreateJobResponse {
  Name?: string;
}
export interface FindMatchesParameters {
  PrimaryKeyColumnName?: string;
  PrecisionRecallTradeoff?: number;
  AccuracyCostTradeoff?: number;
  EnforceProvidedLabels?: boolean;
}
export declare enum TransformType {
  FIND_MATCHES = "FIND_MATCHES",
}
export interface TransformParameters {
  TransformType: TransformType | string | undefined;
  FindMatchesParameters?: FindMatchesParameters;
}
export declare enum MLUserDataEncryptionModeString {
  DISABLED = "DISABLED",
  SSEKMS = "SSE-KMS",
}
export interface MLUserDataEncryption {
  MlUserDataEncryptionMode: MLUserDataEncryptionModeString | string | undefined;
  KmsKeyId?: string;
}
export interface TransformEncryption {
  MlUserDataEncryption?: MLUserDataEncryption;
  TaskRunSecurityConfigurationName?: string;
}
export interface CreateMLTransformRequest {
  Name: string | undefined;
  Description?: string;
  InputRecordTables: GlueTable[] | undefined;
  Parameters: TransformParameters | undefined;
  Role: string | undefined;
  GlueVersion?: string;
  MaxCapacity?: number;
  WorkerType?: WorkerType | string;
  NumberOfWorkers?: number;
  Timeout?: number;
  MaxRetries?: number;
  Tags?: Record<string, string>;
  TransformEncryption?: TransformEncryption;
}
export interface CreateMLTransformResponse {
  TransformId?: string;
}
export interface CreatePartitionRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionInput: PartitionInput | undefined;
}
export interface CreatePartitionResponse {}
export interface PartitionIndex {
  Keys: string[] | undefined;
  IndexName: string | undefined;
}
export interface CreatePartitionIndexRequest {
  CatalogId?: string;
  DatabaseName: string | undefined;
  TableName: string | undefined;
  PartitionIndex: PartitionIndex | undefined;
}
export interface CreatePartitionIndexResponse {}
export interface CreateRegistryInput {
  RegistryName: string | undefined;
  Description?: string;
  Tags?: Record<string, string>;
}
export interface CreateRegistryResponse {
  RegistryArn?: string;
  RegistryName?: string;
  Description?: string;
  Tags?: Record<string, string>;
}
export declare enum Compatibility {
  BACKWARD = "BACKWARD",
  BACKWARD_ALL = "BACKWARD_ALL",
  DISABLED = "DISABLED",
  FORWARD = "FORWARD",
  FORWARD_ALL = "FORWARD_ALL",
  FULL = "FULL",
  FULL_ALL = "FULL_ALL",
  NONE = "NONE",
}
export interface RegistryId {
  RegistryName?: string;
  RegistryArn?: string;
}
export interface CreateSchemaInput {
  RegistryId?: RegistryId;
  SchemaName: string | undefined;
  DataFormat: DataFormat | string | undefined;
  Compatibility?: Compatibility | string;
  Description?: string;
  Tags?: Record<string, string>;
  SchemaDefinition?: string;
}
export declare enum SchemaStatus {
  AVAILABLE = "AVAILABLE",
  DELETING = "DELETING",
  PENDING = "PENDING",
}
export declare enum SchemaVersionStatus {
  AVAILABLE = "AVAILABLE",
  DELETING = "DELETING",
  FAILURE = "FAILURE",
  PENDING = "PENDING",
}
export interface CreateSchemaResponse {
  RegistryName?: string;
  RegistryArn?: string;
  SchemaName?: string;
  SchemaArn?: string;
  Description?: string;
  DataFormat?: DataFormat | string;
  Compatibility?: Compatibility | string;
  SchemaCheckpoint?: number;
  LatestSchemaVersion?: number;
  NextSchemaVersion?: number;
  SchemaStatus?: SchemaStatus | string;
  Tags?: Record<string, string>;
  SchemaVersionId?: string;
  SchemaVersionStatus?: SchemaVersionStatus | string;
}
export interface CodeGenEdge {
  Source: string | undefined;
  Target: string | undefined;
  TargetParameter?: string;
}
export interface CodeGenNodeArg {
  Name: string | undefined;
  Value: string | undefined;
  Param?: boolean;
}
export interface CodeGenNode {
  Id: string | undefined;
  NodeType: string | undefined;
  Args: CodeGenNodeArg[] | undefined;
  LineNumber?: number;
}
export declare const NotificationPropertyFilterSensitiveLog: (
  obj: NotificationProperty
) => any;
export declare const ActionFilterSensitiveLog: (obj: Action) => any;
export declare const AggregateOperationFilterSensitiveLog: (
  obj: AggregateOperation
) => any;
export declare const AggregateFilterSensitiveLog: (obj: Aggregate) => any;
export declare const GlueStudioSchemaColumnFilterSensitiveLog: (
  obj: GlueStudioSchemaColumn
) => any;
export declare const GlueSchemaFilterSensitiveLog: (obj: GlueSchema) => any;
export declare const AthenaConnectorSourceFilterSensitiveLog: (
  obj: AthenaConnectorSource
) => any;
export declare const AuditContextFilterSensitiveLog: (obj: AuditContext) => any;
export declare const ColumnFilterSensitiveLog: (obj: Column) => any;
export declare const SchemaIdFilterSensitiveLog: (obj: SchemaId) => any;
export declare const SchemaReferenceFilterSensitiveLog: (
  obj: SchemaReference
) => any;
export declare const SerDeInfoFilterSensitiveLog: (obj: SerDeInfo) => any;
export declare const SkewedInfoFilterSensitiveLog: (obj: SkewedInfo) => any;
export declare const OrderFilterSensitiveLog: (obj: Order) => any;
export declare const StorageDescriptorFilterSensitiveLog: (
  obj: StorageDescriptor
) => any;
export declare const PartitionInputFilterSensitiveLog: (
  obj: PartitionInput
) => any;
export declare const BatchCreatePartitionRequestFilterSensitiveLog: (
  obj: BatchCreatePartitionRequest
) => any;
export declare const ErrorDetailFilterSensitiveLog: (obj: ErrorDetail) => any;
export declare const PartitionErrorFilterSensitiveLog: (
  obj: PartitionError
) => any;
export declare const BatchCreatePartitionResponseFilterSensitiveLog: (
  obj: BatchCreatePartitionResponse
) => any;
export declare const BatchDeleteConnectionRequestFilterSensitiveLog: (
  obj: BatchDeleteConnectionRequest
) => any;
export declare const BatchDeleteConnectionResponseFilterSensitiveLog: (
  obj: BatchDeleteConnectionResponse
) => any;
export declare const PartitionValueListFilterSensitiveLog: (
  obj: PartitionValueList
) => any;
export declare const BatchDeletePartitionRequestFilterSensitiveLog: (
  obj: BatchDeletePartitionRequest
) => any;
export declare const BatchDeletePartitionResponseFilterSensitiveLog: (
  obj: BatchDeletePartitionResponse
) => any;
export declare const BatchDeleteTableRequestFilterSensitiveLog: (
  obj: BatchDeleteTableRequest
) => any;
export declare const TableErrorFilterSensitiveLog: (obj: TableError) => any;
export declare const BatchDeleteTableResponseFilterSensitiveLog: (
  obj: BatchDeleteTableResponse
) => any;
export declare const BatchDeleteTableVersionRequestFilterSensitiveLog: (
  obj: BatchDeleteTableVersionRequest
) => any;
export declare const TableVersionErrorFilterSensitiveLog: (
  obj: TableVersionError
) => any;
export declare const BatchDeleteTableVersionResponseFilterSensitiveLog: (
  obj: BatchDeleteTableVersionResponse
) => any;
export declare const BatchGetBlueprintsRequestFilterSensitiveLog: (
  obj: BatchGetBlueprintsRequest
) => any;
export declare const LastActiveDefinitionFilterSensitiveLog: (
  obj: LastActiveDefinition
) => any;
export declare const BlueprintFilterSensitiveLog: (obj: Blueprint) => any;
export declare const BatchGetBlueprintsResponseFilterSensitiveLog: (
  obj: BatchGetBlueprintsResponse
) => any;
export declare const BatchGetCrawlersRequestFilterSensitiveLog: (
  obj: BatchGetCrawlersRequest
) => any;
export declare const LakeFormationConfigurationFilterSensitiveLog: (
  obj: LakeFormationConfiguration
) => any;
export declare const LastCrawlInfoFilterSensitiveLog: (
  obj: LastCrawlInfo
) => any;
export declare const LineageConfigurationFilterSensitiveLog: (
  obj: LineageConfiguration
) => any;
export declare const RecrawlPolicyFilterSensitiveLog: (
  obj: RecrawlPolicy
) => any;
export declare const ScheduleFilterSensitiveLog: (obj: Schedule) => any;
export declare const SchemaChangePolicyFilterSensitiveLog: (
  obj: SchemaChangePolicy
) => any;
export declare const CatalogTargetFilterSensitiveLog: (
  obj: CatalogTarget
) => any;
export declare const DeltaTargetFilterSensitiveLog: (obj: DeltaTarget) => any;
export declare const DynamoDBTargetFilterSensitiveLog: (
  obj: DynamoDBTarget
) => any;
export declare const JdbcTargetFilterSensitiveLog: (obj: JdbcTarget) => any;
export declare const MongoDBTargetFilterSensitiveLog: (
  obj: MongoDBTarget
) => any;
export declare const S3TargetFilterSensitiveLog: (obj: S3Target) => any;
export declare const CrawlerTargetsFilterSensitiveLog: (
  obj: CrawlerTargets
) => any;
export declare const CrawlerFilterSensitiveLog: (obj: Crawler) => any;
export declare const BatchGetCrawlersResponseFilterSensitiveLog: (
  obj: BatchGetCrawlersResponse
) => any;
export declare const BatchGetCustomEntityTypesRequestFilterSensitiveLog: (
  obj: BatchGetCustomEntityTypesRequest
) => any;
export declare const CustomEntityTypeFilterSensitiveLog: (
  obj: CustomEntityType
) => any;
export declare const BatchGetCustomEntityTypesResponseFilterSensitiveLog: (
  obj: BatchGetCustomEntityTypesResponse
) => any;
export declare const BatchGetDataQualityResultRequestFilterSensitiveLog: (
  obj: BatchGetDataQualityResultRequest
) => any;
export declare const GlueTableFilterSensitiveLog: (obj: GlueTable) => any;
export declare const DataSourceFilterSensitiveLog: (obj: DataSource) => any;
export declare const DataQualityRuleResultFilterSensitiveLog: (
  obj: DataQualityRuleResult
) => any;
export declare const DataQualityResultFilterSensitiveLog: (
  obj: DataQualityResult
) => any;
export declare const BatchGetDataQualityResultResponseFilterSensitiveLog: (
  obj: BatchGetDataQualityResultResponse
) => any;
export declare const BatchGetDevEndpointsRequestFilterSensitiveLog: (
  obj: BatchGetDevEndpointsRequest
) => any;
export declare const DevEndpointFilterSensitiveLog: (obj: DevEndpoint) => any;
export declare const BatchGetDevEndpointsResponseFilterSensitiveLog: (
  obj: BatchGetDevEndpointsResponse
) => any;
export declare const BatchGetJobsRequestFilterSensitiveLog: (
  obj: BatchGetJobsRequest
) => any;
export declare const CatalogHudiSourceFilterSensitiveLog: (
  obj: CatalogHudiSource
) => any;
export declare const StreamingDataPreviewOptionsFilterSensitiveLog: (
  obj: StreamingDataPreviewOptions
) => any;
export declare const KafkaStreamingSourceOptionsFilterSensitiveLog: (
  obj: KafkaStreamingSourceOptions
) => any;
export declare const CatalogKafkaSourceFilterSensitiveLog: (
  obj: CatalogKafkaSource
) => any;
export declare const KinesisStreamingSourceOptionsFilterSensitiveLog: (
  obj: KinesisStreamingSourceOptions
) => any;
export declare const CatalogKinesisSourceFilterSensitiveLog: (
  obj: CatalogKinesisSource
) => any;
export declare const CatalogSourceFilterSensitiveLog: (
  obj: CatalogSource
) => any;
export declare const BasicCatalogTargetFilterSensitiveLog: (
  obj: BasicCatalogTarget
) => any;
export declare const CustomCodeFilterSensitiveLog: (obj: CustomCode) => any;
export declare const DirectJDBCSourceFilterSensitiveLog: (
  obj: DirectJDBCSource
) => any;
export declare const DirectKafkaSourceFilterSensitiveLog: (
  obj: DirectKafkaSource
) => any;
export declare const DirectKinesisSourceFilterSensitiveLog: (
  obj: DirectKinesisSource
) => any;
export declare const DropDuplicatesFilterSensitiveLog: (
  obj: DropDuplicates
) => any;
export declare const DropFieldsFilterSensitiveLog: (obj: DropFields) => any;
export declare const NullCheckBoxListFilterSensitiveLog: (
  obj: NullCheckBoxList
) => any;
export declare const DatatypeFilterSensitiveLog: (obj: Datatype) => any;
export declare const NullValueFieldFilterSensitiveLog: (
  obj: NullValueField
) => any;
export declare const DropNullFieldsFilterSensitiveLog: (
  obj: DropNullFields
) => any;
export declare const TransformConfigParameterFilterSensitiveLog: (
  obj: TransformConfigParameter
) => any;
export declare const DynamicTransformFilterSensitiveLog: (
  obj: DynamicTransform
) => any;
export declare const DynamoDBCatalogSourceFilterSensitiveLog: (
  obj: DynamoDBCatalogSource
) => any;
export declare const DQResultsPublishingOptionsFilterSensitiveLog: (
  obj: DQResultsPublishingOptions
) => any;
export declare const DQStopJobOnFailureOptionsFilterSensitiveLog: (
  obj: DQStopJobOnFailureOptions
) => any;
export declare const EvaluateDataQualityFilterSensitiveLog: (
  obj: EvaluateDataQuality
) => any;
export declare const FillMissingValuesFilterSensitiveLog: (
  obj: FillMissingValues
) => any;
export declare const FilterValueFilterSensitiveLog: (obj: FilterValue) => any;
export declare const FilterExpressionFilterSensitiveLog: (
  obj: FilterExpression
) => any;
export declare const FilterFilterSensitiveLog: (obj: Filter) => any;
export declare const S3SourceAdditionalOptionsFilterSensitiveLog: (
  obj: S3SourceAdditionalOptions
) => any;
export declare const GovernedCatalogSourceFilterSensitiveLog: (
  obj: GovernedCatalogSource
) => any;
export declare const CatalogSchemaChangePolicyFilterSensitiveLog: (
  obj: CatalogSchemaChangePolicy
) => any;
export declare const GovernedCatalogTargetFilterSensitiveLog: (
  obj: GovernedCatalogTarget
) => any;
export declare const JDBCConnectorOptionsFilterSensitiveLog: (
  obj: JDBCConnectorOptions
) => any;
export declare const JDBCConnectorSourceFilterSensitiveLog: (
  obj: JDBCConnectorSource
) => any;
export declare const JDBCConnectorTargetFilterSensitiveLog: (
  obj: JDBCConnectorTarget
) => any;
export declare const JoinColumnFilterSensitiveLog: (obj: JoinColumn) => any;
export declare const JoinFilterSensitiveLog: (obj: Join) => any;
export declare const MergeFilterSensitiveLog: (obj: Merge) => any;
export declare const MicrosoftSQLServerCatalogSourceFilterSensitiveLog: (
  obj: MicrosoftSQLServerCatalogSource
) => any;
export declare const MicrosoftSQLServerCatalogTargetFilterSensitiveLog: (
  obj: MicrosoftSQLServerCatalogTarget
) => any;
export declare const MySQLCatalogSourceFilterSensitiveLog: (
  obj: MySQLCatalogSource
) => any;
export declare const MySQLCatalogTargetFilterSensitiveLog: (
  obj: MySQLCatalogTarget
) => any;
export declare const OracleSQLCatalogSourceFilterSensitiveLog: (
  obj: OracleSQLCatalogSource
) => any;
export declare const OracleSQLCatalogTargetFilterSensitiveLog: (
  obj: OracleSQLCatalogTarget
) => any;
export declare const PIIDetectionFilterSensitiveLog: (obj: PIIDetection) => any;
export declare const PostgreSQLCatalogSourceFilterSensitiveLog: (
  obj: PostgreSQLCatalogSource
) => any;
export declare const PostgreSQLCatalogTargetFilterSensitiveLog: (
  obj: PostgreSQLCatalogTarget
) => any;
export declare const RedshiftSourceFilterSensitiveLog: (
  obj: RedshiftSource
) => any;
export declare const UpsertRedshiftTargetOptionsFilterSensitiveLog: (
  obj: UpsertRedshiftTargetOptions
) => any;
export declare const RedshiftTargetFilterSensitiveLog: (
  obj: RedshiftTarget
) => any;
export declare const RelationalCatalogSourceFilterSensitiveLog: (
  obj: RelationalCatalogSource
) => any;
export declare const RenameFieldFilterSensitiveLog: (obj: RenameField) => any;
export declare const S3CatalogHudiSourceFilterSensitiveLog: (
  obj: S3CatalogHudiSource
) => any;
export declare const S3CatalogSourceFilterSensitiveLog: (
  obj: S3CatalogSource
) => any;
export declare const S3CatalogTargetFilterSensitiveLog: (
  obj: S3CatalogTarget
) => any;
export declare const S3DirectSourceAdditionalOptionsFilterSensitiveLog: (
  obj: S3DirectSourceAdditionalOptions
) => any;
export declare const S3CsvSourceFilterSensitiveLog: (obj: S3CsvSource) => any;
export declare const DirectSchemaChangePolicyFilterSensitiveLog: (
  obj: DirectSchemaChangePolicy
) => any;
export declare const S3DirectTargetFilterSensitiveLog: (
  obj: S3DirectTarget
) => any;
export declare const S3GlueParquetTargetFilterSensitiveLog: (
  obj: S3GlueParquetTarget
) => any;
export declare const S3HudiCatalogTargetFilterSensitiveLog: (
  obj: S3HudiCatalogTarget
) => any;
export declare const S3HudiDirectTargetFilterSensitiveLog: (
  obj: S3HudiDirectTarget
) => any;
export declare const S3HudiSourceFilterSensitiveLog: (obj: S3HudiSource) => any;
export declare const S3JsonSourceFilterSensitiveLog: (obj: S3JsonSource) => any;
export declare const S3ParquetSourceFilterSensitiveLog: (
  obj: S3ParquetSource
) => any;
export declare const SelectFieldsFilterSensitiveLog: (obj: SelectFields) => any;
export declare const SelectFromCollectionFilterSensitiveLog: (
  obj: SelectFromCollection
) => any;
export declare const SparkConnectorSourceFilterSensitiveLog: (
  obj: SparkConnectorSource
) => any;
export declare const SparkConnectorTargetFilterSensitiveLog: (
  obj: SparkConnectorTarget
) => any;
export declare const SqlAliasFilterSensitiveLog: (obj: SqlAlias) => any;
export declare const SparkSQLFilterSensitiveLog: (obj: SparkSQL) => any;
export declare const SpigotFilterSensitiveLog: (obj: Spigot) => any;
export declare const SplitFieldsFilterSensitiveLog: (obj: SplitFields) => any;
export declare const UnionFilterSensitiveLog: (obj: Union) => any;
export declare const JobCommandFilterSensitiveLog: (obj: JobCommand) => any;
export declare const ConnectionsListFilterSensitiveLog: (
  obj: ConnectionsList
) => any;
export declare const ExecutionPropertyFilterSensitiveLog: (
  obj: ExecutionProperty
) => any;
export declare const SourceControlDetailsFilterSensitiveLog: (
  obj: SourceControlDetails
) => any;
export declare const BatchGetPartitionRequestFilterSensitiveLog: (
  obj: BatchGetPartitionRequest
) => any;
export declare const PartitionFilterSensitiveLog: (obj: Partition) => any;
export declare const BatchGetPartitionResponseFilterSensitiveLog: (
  obj: BatchGetPartitionResponse
) => any;
export declare const BatchGetTriggersRequestFilterSensitiveLog: (
  obj: BatchGetTriggersRequest
) => any;
export declare const EventBatchingConditionFilterSensitiveLog: (
  obj: EventBatchingCondition
) => any;
export declare const ConditionFilterSensitiveLog: (obj: Condition) => any;
export declare const PredicateFilterSensitiveLog: (obj: Predicate) => any;
export declare const TriggerFilterSensitiveLog: (obj: Trigger) => any;
export declare const BatchGetTriggersResponseFilterSensitiveLog: (
  obj: BatchGetTriggersResponse
) => any;
export declare const BatchGetWorkflowsRequestFilterSensitiveLog: (
  obj: BatchGetWorkflowsRequest
) => any;
export declare const BlueprintDetailsFilterSensitiveLog: (
  obj: BlueprintDetails
) => any;
export declare const EdgeFilterSensitiveLog: (obj: Edge) => any;
export declare const CrawlFilterSensitiveLog: (obj: Crawl) => any;
export declare const CrawlerNodeDetailsFilterSensitiveLog: (
  obj: CrawlerNodeDetails
) => any;
export declare const PredecessorFilterSensitiveLog: (obj: Predecessor) => any;
export declare const JobRunFilterSensitiveLog: (obj: JobRun) => any;
export declare const JobNodeDetailsFilterSensitiveLog: (
  obj: JobNodeDetails
) => any;
export declare const TriggerNodeDetailsFilterSensitiveLog: (
  obj: TriggerNodeDetails
) => any;
export declare const NodeFilterSensitiveLog: (obj: Node) => any;
export declare const WorkflowGraphFilterSensitiveLog: (
  obj: WorkflowGraph
) => any;
export declare const StartingEventBatchConditionFilterSensitiveLog: (
  obj: StartingEventBatchCondition
) => any;
export declare const WorkflowRunStatisticsFilterSensitiveLog: (
  obj: WorkflowRunStatistics
) => any;
export declare const WorkflowRunFilterSensitiveLog: (obj: WorkflowRun) => any;
export declare const WorkflowFilterSensitiveLog: (obj: Workflow) => any;
export declare const BatchGetWorkflowsResponseFilterSensitiveLog: (
  obj: BatchGetWorkflowsResponse
) => any;
export declare const BatchStopJobRunRequestFilterSensitiveLog: (
  obj: BatchStopJobRunRequest
) => any;
export declare const BatchStopJobRunErrorFilterSensitiveLog: (
  obj: BatchStopJobRunError
) => any;
export declare const BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog: (
  obj: BatchStopJobRunSuccessfulSubmission
) => any;
export declare const BatchStopJobRunResponseFilterSensitiveLog: (
  obj: BatchStopJobRunResponse
) => any;
export declare const BatchUpdatePartitionRequestEntryFilterSensitiveLog: (
  obj: BatchUpdatePartitionRequestEntry
) => any;
export declare const BatchUpdatePartitionRequestFilterSensitiveLog: (
  obj: BatchUpdatePartitionRequest
) => any;
export declare const BatchUpdatePartitionFailureEntryFilterSensitiveLog: (
  obj: BatchUpdatePartitionFailureEntry
) => any;
export declare const BatchUpdatePartitionResponseFilterSensitiveLog: (
  obj: BatchUpdatePartitionResponse
) => any;
export declare const CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog: (
  obj: CancelDataQualityRuleRecommendationRunRequest
) => any;
export declare const CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog: (
  obj: CancelDataQualityRuleRecommendationRunResponse
) => any;
export declare const CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog: (
  obj: CancelDataQualityRulesetEvaluationRunRequest
) => any;
export declare const CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog: (
  obj: CancelDataQualityRulesetEvaluationRunResponse
) => any;
export declare const CancelMLTaskRunRequestFilterSensitiveLog: (
  obj: CancelMLTaskRunRequest
) => any;
export declare const CancelMLTaskRunResponseFilterSensitiveLog: (
  obj: CancelMLTaskRunResponse
) => any;
export declare const CancelStatementRequestFilterSensitiveLog: (
  obj: CancelStatementRequest
) => any;
export declare const CancelStatementResponseFilterSensitiveLog: (
  obj: CancelStatementResponse
) => any;
export declare const CheckSchemaVersionValidityInputFilterSensitiveLog: (
  obj: CheckSchemaVersionValidityInput
) => any;
export declare const CheckSchemaVersionValidityResponseFilterSensitiveLog: (
  obj: CheckSchemaVersionValidityResponse
) => any;
export declare const CreateBlueprintRequestFilterSensitiveLog: (
  obj: CreateBlueprintRequest
) => any;
export declare const CreateBlueprintResponseFilterSensitiveLog: (
  obj: CreateBlueprintResponse
) => any;
export declare const CreateCsvClassifierRequestFilterSensitiveLog: (
  obj: CreateCsvClassifierRequest
) => any;
export declare const CreateGrokClassifierRequestFilterSensitiveLog: (
  obj: CreateGrokClassifierRequest
) => any;
export declare const CreateJsonClassifierRequestFilterSensitiveLog: (
  obj: CreateJsonClassifierRequest
) => any;
export declare const CreateXMLClassifierRequestFilterSensitiveLog: (
  obj: CreateXMLClassifierRequest
) => any;
export declare const CreateClassifierRequestFilterSensitiveLog: (
  obj: CreateClassifierRequest
) => any;
export declare const CreateClassifierResponseFilterSensitiveLog: (
  obj: CreateClassifierResponse
) => any;
export declare const PhysicalConnectionRequirementsFilterSensitiveLog: (
  obj: PhysicalConnectionRequirements
) => any;
export declare const ConnectionInputFilterSensitiveLog: (
  obj: ConnectionInput
) => any;
export declare const CreateConnectionRequestFilterSensitiveLog: (
  obj: CreateConnectionRequest
) => any;
export declare const CreateConnectionResponseFilterSensitiveLog: (
  obj: CreateConnectionResponse
) => any;
export declare const CreateCrawlerRequestFilterSensitiveLog: (
  obj: CreateCrawlerRequest
) => any;
export declare const CreateCrawlerResponseFilterSensitiveLog: (
  obj: CreateCrawlerResponse
) => any;
export declare const CreateCustomEntityTypeRequestFilterSensitiveLog: (
  obj: CreateCustomEntityTypeRequest
) => any;
export declare const CreateCustomEntityTypeResponseFilterSensitiveLog: (
  obj: CreateCustomEntityTypeResponse
) => any;
export declare const DataLakePrincipalFilterSensitiveLog: (
  obj: DataLakePrincipal
) => any;
export declare const PrincipalPermissionsFilterSensitiveLog: (
  obj: PrincipalPermissions
) => any;
export declare const DatabaseIdentifierFilterSensitiveLog: (
  obj: DatabaseIdentifier
) => any;
export declare const DatabaseInputFilterSensitiveLog: (
  obj: DatabaseInput
) => any;
export declare const CreateDatabaseRequestFilterSensitiveLog: (
  obj: CreateDatabaseRequest
) => any;
export declare const CreateDatabaseResponseFilterSensitiveLog: (
  obj: CreateDatabaseResponse
) => any;
export declare const DataQualityTargetTableFilterSensitiveLog: (
  obj: DataQualityTargetTable
) => any;
export declare const CreateDataQualityRulesetRequestFilterSensitiveLog: (
  obj: CreateDataQualityRulesetRequest
) => any;
export declare const CreateDataQualityRulesetResponseFilterSensitiveLog: (
  obj: CreateDataQualityRulesetResponse
) => any;
export declare const CreateDevEndpointRequestFilterSensitiveLog: (
  obj: CreateDevEndpointRequest
) => any;
export declare const CreateDevEndpointResponseFilterSensitiveLog: (
  obj: CreateDevEndpointResponse
) => any;
export declare const CreateJobResponseFilterSensitiveLog: (
  obj: CreateJobResponse
) => any;
export declare const FindMatchesParametersFilterSensitiveLog: (
  obj: FindMatchesParameters
) => any;
export declare const TransformParametersFilterSensitiveLog: (
  obj: TransformParameters
) => any;
export declare const MLUserDataEncryptionFilterSensitiveLog: (
  obj: MLUserDataEncryption
) => any;
export declare const TransformEncryptionFilterSensitiveLog: (
  obj: TransformEncryption
) => any;
export declare const CreateMLTransformRequestFilterSensitiveLog: (
  obj: CreateMLTransformRequest
) => any;
export declare const CreateMLTransformResponseFilterSensitiveLog: (
  obj: CreateMLTransformResponse
) => any;
export declare const CreatePartitionRequestFilterSensitiveLog: (
  obj: CreatePartitionRequest
) => any;
export declare const CreatePartitionResponseFilterSensitiveLog: (
  obj: CreatePartitionResponse
) => any;
export declare const PartitionIndexFilterSensitiveLog: (
  obj: PartitionIndex
) => any;
export declare const CreatePartitionIndexRequestFilterSensitiveLog: (
  obj: CreatePartitionIndexRequest
) => any;
export declare const CreatePartitionIndexResponseFilterSensitiveLog: (
  obj: CreatePartitionIndexResponse
) => any;
export declare const CreateRegistryInputFilterSensitiveLog: (
  obj: CreateRegistryInput
) => any;
export declare const CreateRegistryResponseFilterSensitiveLog: (
  obj: CreateRegistryResponse
) => any;
export declare const RegistryIdFilterSensitiveLog: (obj: RegistryId) => any;
export declare const CreateSchemaInputFilterSensitiveLog: (
  obj: CreateSchemaInput
) => any;
export declare const CreateSchemaResponseFilterSensitiveLog: (
  obj: CreateSchemaResponse
) => any;
export declare const CodeGenEdgeFilterSensitiveLog: (obj: CodeGenEdge) => any;
export declare const CodeGenNodeArgFilterSensitiveLog: (
  obj: CodeGenNodeArg
) => any;
export declare const CodeGenNodeFilterSensitiveLog: (obj: CodeGenNode) => any;
