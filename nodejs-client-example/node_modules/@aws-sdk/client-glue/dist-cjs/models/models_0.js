"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerState = exports.Logical = exports.JobRunState = exports.LogicalOperator = exports.CrawlState = exports.InvalidStateException = exports.SourceControlProvider = exports.SourceControlAuthStrategy = exports.ExecutionClass = exports.UnionType = exports.HudiTargetCompressionType = exports.ParquetCompressionType = exports.TargetFormat = exports.Separator = exports.QuoteChar = exports.CompressionType = exports.PiiType = exports.JoinType = exports.GlueRecordType = exports.JDBCDataType = exports.UpdateCatalogBehavior = exports.FilterLogicalOperator = exports.FilterValueType = exports.FilterOperation = exports.DQStopJobOnFailureTiming = exports.DQTransformOutput = exports.ParamType = exports.JDBCConnectionType = exports.StartingPosition = exports.WorkerType = exports.DataQualityRuleResultStatus = exports.JdbcMetadataEntry = exports.CrawlerState = exports.UpdateBehavior = exports.DeleteBehavior = exports.ScheduleState = exports.RecrawlBehavior = exports.CrawlerLineageSettings = exports.LastCrawlStatus = exports.BlueprintStatus = exports.ResourceNotReadyException = exports.ResourceNumberLimitExceededException = exports.OperationTimeoutException = exports.InvalidInputException = exports.InternalServiceException = exports.GlueEncryptionException = exports.EntityNotFoundException = exports.AlreadyExistsException = exports.AggFunction = exports.AccessDeniedException = void 0;
exports.BatchGetBlueprintsRequestFilterSensitiveLog = exports.BatchDeleteTableVersionResponseFilterSensitiveLog = exports.TableVersionErrorFilterSensitiveLog = exports.BatchDeleteTableVersionRequestFilterSensitiveLog = exports.BatchDeleteTableResponseFilterSensitiveLog = exports.TableErrorFilterSensitiveLog = exports.BatchDeleteTableRequestFilterSensitiveLog = exports.BatchDeletePartitionResponseFilterSensitiveLog = exports.BatchDeletePartitionRequestFilterSensitiveLog = exports.PartitionValueListFilterSensitiveLog = exports.BatchDeleteConnectionResponseFilterSensitiveLog = exports.BatchDeleteConnectionRequestFilterSensitiveLog = exports.BatchCreatePartitionResponseFilterSensitiveLog = exports.PartitionErrorFilterSensitiveLog = exports.ErrorDetailFilterSensitiveLog = exports.BatchCreatePartitionRequestFilterSensitiveLog = exports.PartitionInputFilterSensitiveLog = exports.StorageDescriptorFilterSensitiveLog = exports.OrderFilterSensitiveLog = exports.SkewedInfoFilterSensitiveLog = exports.SerDeInfoFilterSensitiveLog = exports.SchemaReferenceFilterSensitiveLog = exports.SchemaIdFilterSensitiveLog = exports.ColumnFilterSensitiveLog = exports.AuditContextFilterSensitiveLog = exports.AthenaConnectorSourceFilterSensitiveLog = exports.GlueSchemaFilterSensitiveLog = exports.GlueStudioSchemaColumnFilterSensitiveLog = exports.AggregateFilterSensitiveLog = exports.AggregateOperationFilterSensitiveLog = exports.ActionFilterSensitiveLog = exports.NotificationPropertyFilterSensitiveLog = exports.SchemaVersionStatus = exports.SchemaStatus = exports.Compatibility = exports.MLUserDataEncryptionModeString = exports.TransformType = exports.ValidationException = exports.Permission = exports.ConcurrentModificationException = exports.IdempotentParameterMismatchException = exports.ConnectionType = exports.ConnectionPropertyKey = exports.CsvHeaderOption = exports.DataFormat = exports.IllegalSessionStateException = exports.TaskStatusType = exports.WorkflowRunStatus = exports.NodeType = exports.TriggerType = void 0;
exports.DropNullFieldsFilterSensitiveLog = exports.NullValueFieldFilterSensitiveLog = exports.DatatypeFilterSensitiveLog = exports.NullCheckBoxListFilterSensitiveLog = exports.DropFieldsFilterSensitiveLog = exports.DropDuplicatesFilterSensitiveLog = exports.DirectKinesisSourceFilterSensitiveLog = exports.DirectKafkaSourceFilterSensitiveLog = exports.DirectJDBCSourceFilterSensitiveLog = exports.CustomCodeFilterSensitiveLog = exports.BasicCatalogTargetFilterSensitiveLog = exports.CatalogSourceFilterSensitiveLog = exports.CatalogKinesisSourceFilterSensitiveLog = exports.KinesisStreamingSourceOptionsFilterSensitiveLog = exports.CatalogKafkaSourceFilterSensitiveLog = exports.KafkaStreamingSourceOptionsFilterSensitiveLog = exports.StreamingDataPreviewOptionsFilterSensitiveLog = exports.CatalogHudiSourceFilterSensitiveLog = exports.BatchGetJobsRequestFilterSensitiveLog = exports.BatchGetDevEndpointsResponseFilterSensitiveLog = exports.DevEndpointFilterSensitiveLog = exports.BatchGetDevEndpointsRequestFilterSensitiveLog = exports.BatchGetDataQualityResultResponseFilterSensitiveLog = exports.DataQualityResultFilterSensitiveLog = exports.DataQualityRuleResultFilterSensitiveLog = exports.DataSourceFilterSensitiveLog = exports.GlueTableFilterSensitiveLog = exports.BatchGetDataQualityResultRequestFilterSensitiveLog = exports.BatchGetCustomEntityTypesResponseFilterSensitiveLog = exports.CustomEntityTypeFilterSensitiveLog = exports.BatchGetCustomEntityTypesRequestFilterSensitiveLog = exports.BatchGetCrawlersResponseFilterSensitiveLog = exports.CrawlerFilterSensitiveLog = exports.CrawlerTargetsFilterSensitiveLog = exports.S3TargetFilterSensitiveLog = exports.MongoDBTargetFilterSensitiveLog = exports.JdbcTargetFilterSensitiveLog = exports.DynamoDBTargetFilterSensitiveLog = exports.DeltaTargetFilterSensitiveLog = exports.CatalogTargetFilterSensitiveLog = exports.SchemaChangePolicyFilterSensitiveLog = exports.ScheduleFilterSensitiveLog = exports.RecrawlPolicyFilterSensitiveLog = exports.LineageConfigurationFilterSensitiveLog = exports.LastCrawlInfoFilterSensitiveLog = exports.LakeFormationConfigurationFilterSensitiveLog = exports.BatchGetCrawlersRequestFilterSensitiveLog = exports.BatchGetBlueprintsResponseFilterSensitiveLog = exports.BlueprintFilterSensitiveLog = exports.LastActiveDefinitionFilterSensitiveLog = void 0;
exports.SparkConnectorSourceFilterSensitiveLog = exports.SelectFromCollectionFilterSensitiveLog = exports.SelectFieldsFilterSensitiveLog = exports.S3ParquetSourceFilterSensitiveLog = exports.S3JsonSourceFilterSensitiveLog = exports.S3HudiSourceFilterSensitiveLog = exports.S3HudiDirectTargetFilterSensitiveLog = exports.S3HudiCatalogTargetFilterSensitiveLog = exports.S3GlueParquetTargetFilterSensitiveLog = exports.S3DirectTargetFilterSensitiveLog = exports.DirectSchemaChangePolicyFilterSensitiveLog = exports.S3CsvSourceFilterSensitiveLog = exports.S3DirectSourceAdditionalOptionsFilterSensitiveLog = exports.S3CatalogTargetFilterSensitiveLog = exports.S3CatalogSourceFilterSensitiveLog = exports.S3CatalogHudiSourceFilterSensitiveLog = exports.RenameFieldFilterSensitiveLog = exports.RelationalCatalogSourceFilterSensitiveLog = exports.RedshiftTargetFilterSensitiveLog = exports.UpsertRedshiftTargetOptionsFilterSensitiveLog = exports.RedshiftSourceFilterSensitiveLog = exports.PostgreSQLCatalogTargetFilterSensitiveLog = exports.PostgreSQLCatalogSourceFilterSensitiveLog = exports.PIIDetectionFilterSensitiveLog = exports.OracleSQLCatalogTargetFilterSensitiveLog = exports.OracleSQLCatalogSourceFilterSensitiveLog = exports.MySQLCatalogTargetFilterSensitiveLog = exports.MySQLCatalogSourceFilterSensitiveLog = exports.MicrosoftSQLServerCatalogTargetFilterSensitiveLog = exports.MicrosoftSQLServerCatalogSourceFilterSensitiveLog = exports.MergeFilterSensitiveLog = exports.JoinFilterSensitiveLog = exports.JoinColumnFilterSensitiveLog = exports.JDBCConnectorTargetFilterSensitiveLog = exports.JDBCConnectorSourceFilterSensitiveLog = exports.JDBCConnectorOptionsFilterSensitiveLog = exports.GovernedCatalogTargetFilterSensitiveLog = exports.CatalogSchemaChangePolicyFilterSensitiveLog = exports.GovernedCatalogSourceFilterSensitiveLog = exports.S3SourceAdditionalOptionsFilterSensitiveLog = exports.FilterFilterSensitiveLog = exports.FilterExpressionFilterSensitiveLog = exports.FilterValueFilterSensitiveLog = exports.FillMissingValuesFilterSensitiveLog = exports.EvaluateDataQualityFilterSensitiveLog = exports.DQStopJobOnFailureOptionsFilterSensitiveLog = exports.DQResultsPublishingOptionsFilterSensitiveLog = exports.DynamoDBCatalogSourceFilterSensitiveLog = exports.DynamicTransformFilterSensitiveLog = exports.TransformConfigParameterFilterSensitiveLog = void 0;
exports.CancelStatementRequestFilterSensitiveLog = exports.CancelMLTaskRunResponseFilterSensitiveLog = exports.CancelMLTaskRunRequestFilterSensitiveLog = exports.CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog = exports.CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog = exports.CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog = exports.CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog = exports.BatchUpdatePartitionResponseFilterSensitiveLog = exports.BatchUpdatePartitionFailureEntryFilterSensitiveLog = exports.BatchUpdatePartitionRequestFilterSensitiveLog = exports.BatchUpdatePartitionRequestEntryFilterSensitiveLog = exports.BatchStopJobRunResponseFilterSensitiveLog = exports.BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog = exports.BatchStopJobRunErrorFilterSensitiveLog = exports.BatchStopJobRunRequestFilterSensitiveLog = exports.BatchGetWorkflowsResponseFilterSensitiveLog = exports.WorkflowFilterSensitiveLog = exports.WorkflowRunFilterSensitiveLog = exports.WorkflowRunStatisticsFilterSensitiveLog = exports.StartingEventBatchConditionFilterSensitiveLog = exports.WorkflowGraphFilterSensitiveLog = exports.NodeFilterSensitiveLog = exports.TriggerNodeDetailsFilterSensitiveLog = exports.JobNodeDetailsFilterSensitiveLog = exports.JobRunFilterSensitiveLog = exports.PredecessorFilterSensitiveLog = exports.CrawlerNodeDetailsFilterSensitiveLog = exports.CrawlFilterSensitiveLog = exports.EdgeFilterSensitiveLog = exports.BlueprintDetailsFilterSensitiveLog = exports.BatchGetWorkflowsRequestFilterSensitiveLog = exports.BatchGetTriggersResponseFilterSensitiveLog = exports.TriggerFilterSensitiveLog = exports.PredicateFilterSensitiveLog = exports.ConditionFilterSensitiveLog = exports.EventBatchingConditionFilterSensitiveLog = exports.BatchGetTriggersRequestFilterSensitiveLog = exports.BatchGetPartitionResponseFilterSensitiveLog = exports.PartitionFilterSensitiveLog = exports.BatchGetPartitionRequestFilterSensitiveLog = exports.SourceControlDetailsFilterSensitiveLog = exports.ExecutionPropertyFilterSensitiveLog = exports.ConnectionsListFilterSensitiveLog = exports.JobCommandFilterSensitiveLog = exports.UnionFilterSensitiveLog = exports.SplitFieldsFilterSensitiveLog = exports.SpigotFilterSensitiveLog = exports.SparkSQLFilterSensitiveLog = exports.SqlAliasFilterSensitiveLog = exports.SparkConnectorTargetFilterSensitiveLog = void 0;
exports.CodeGenNodeFilterSensitiveLog = exports.CodeGenNodeArgFilterSensitiveLog = exports.CodeGenEdgeFilterSensitiveLog = exports.CreateSchemaResponseFilterSensitiveLog = exports.CreateSchemaInputFilterSensitiveLog = exports.RegistryIdFilterSensitiveLog = exports.CreateRegistryResponseFilterSensitiveLog = exports.CreateRegistryInputFilterSensitiveLog = exports.CreatePartitionIndexResponseFilterSensitiveLog = exports.CreatePartitionIndexRequestFilterSensitiveLog = exports.PartitionIndexFilterSensitiveLog = exports.CreatePartitionResponseFilterSensitiveLog = exports.CreatePartitionRequestFilterSensitiveLog = exports.CreateMLTransformResponseFilterSensitiveLog = exports.CreateMLTransformRequestFilterSensitiveLog = exports.TransformEncryptionFilterSensitiveLog = exports.MLUserDataEncryptionFilterSensitiveLog = exports.TransformParametersFilterSensitiveLog = exports.FindMatchesParametersFilterSensitiveLog = exports.CreateJobResponseFilterSensitiveLog = exports.CreateDevEndpointResponseFilterSensitiveLog = exports.CreateDevEndpointRequestFilterSensitiveLog = exports.CreateDataQualityRulesetResponseFilterSensitiveLog = exports.CreateDataQualityRulesetRequestFilterSensitiveLog = exports.DataQualityTargetTableFilterSensitiveLog = exports.CreateDatabaseResponseFilterSensitiveLog = exports.CreateDatabaseRequestFilterSensitiveLog = exports.DatabaseInputFilterSensitiveLog = exports.DatabaseIdentifierFilterSensitiveLog = exports.PrincipalPermissionsFilterSensitiveLog = exports.DataLakePrincipalFilterSensitiveLog = exports.CreateCustomEntityTypeResponseFilterSensitiveLog = exports.CreateCustomEntityTypeRequestFilterSensitiveLog = exports.CreateCrawlerResponseFilterSensitiveLog = exports.CreateCrawlerRequestFilterSensitiveLog = exports.CreateConnectionResponseFilterSensitiveLog = exports.CreateConnectionRequestFilterSensitiveLog = exports.ConnectionInputFilterSensitiveLog = exports.PhysicalConnectionRequirementsFilterSensitiveLog = exports.CreateClassifierResponseFilterSensitiveLog = exports.CreateClassifierRequestFilterSensitiveLog = exports.CreateXMLClassifierRequestFilterSensitiveLog = exports.CreateJsonClassifierRequestFilterSensitiveLog = exports.CreateGrokClassifierRequestFilterSensitiveLog = exports.CreateCsvClassifierRequestFilterSensitiveLog = exports.CreateBlueprintResponseFilterSensitiveLog = exports.CreateBlueprintRequestFilterSensitiveLog = exports.CheckSchemaVersionValidityResponseFilterSensitiveLog = exports.CheckSchemaVersionValidityInputFilterSensitiveLog = exports.CancelStatementResponseFilterSensitiveLog = void 0;
const GlueServiceException_1 = require("./GlueServiceException");
class AccessDeniedException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
var AggFunction;
(function (AggFunction) {
    AggFunction["avg"] = "avg";
    AggFunction["count"] = "count";
    AggFunction["countDistinct"] = "countDistinct";
    AggFunction["first"] = "first";
    AggFunction["kurtosis"] = "kurtosis";
    AggFunction["last"] = "last";
    AggFunction["max"] = "max";
    AggFunction["min"] = "min";
    AggFunction["skewness"] = "skewness";
    AggFunction["stddev_pop"] = "stddev_pop";
    AggFunction["stddev_samp"] = "stddev_samp";
    AggFunction["sum"] = "sum";
    AggFunction["sumDistinct"] = "sumDistinct";
    AggFunction["var_pop"] = "var_pop";
    AggFunction["var_samp"] = "var_samp";
})(AggFunction = exports.AggFunction || (exports.AggFunction = {}));
class AlreadyExistsException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.AlreadyExistsException = AlreadyExistsException;
class EntityNotFoundException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "EntityNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntityNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.EntityNotFoundException = EntityNotFoundException;
class GlueEncryptionException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "GlueEncryptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlueEncryptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlueEncryptionException.prototype);
        this.Message = opts.Message;
    }
}
exports.GlueEncryptionException = GlueEncryptionException;
class InternalServiceException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServiceException = InternalServiceException;
class InvalidInputException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidInputException = InvalidInputException;
class OperationTimeoutException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "OperationTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationTimeoutException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationTimeoutException = OperationTimeoutException;
class ResourceNumberLimitExceededException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ResourceNumberLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNumberLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNumberLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNumberLimitExceededException = ResourceNumberLimitExceededException;
class ResourceNotReadyException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotReadyException = ResourceNotReadyException;
var BlueprintStatus;
(function (BlueprintStatus) {
    BlueprintStatus["ACTIVE"] = "ACTIVE";
    BlueprintStatus["CREATING"] = "CREATING";
    BlueprintStatus["FAILED"] = "FAILED";
    BlueprintStatus["UPDATING"] = "UPDATING";
})(BlueprintStatus = exports.BlueprintStatus || (exports.BlueprintStatus = {}));
var LastCrawlStatus;
(function (LastCrawlStatus) {
    LastCrawlStatus["CANCELLED"] = "CANCELLED";
    LastCrawlStatus["FAILED"] = "FAILED";
    LastCrawlStatus["SUCCEEDED"] = "SUCCEEDED";
})(LastCrawlStatus = exports.LastCrawlStatus || (exports.LastCrawlStatus = {}));
var CrawlerLineageSettings;
(function (CrawlerLineageSettings) {
    CrawlerLineageSettings["DISABLE"] = "DISABLE";
    CrawlerLineageSettings["ENABLE"] = "ENABLE";
})(CrawlerLineageSettings = exports.CrawlerLineageSettings || (exports.CrawlerLineageSettings = {}));
var RecrawlBehavior;
(function (RecrawlBehavior) {
    RecrawlBehavior["CRAWL_EVENT_MODE"] = "CRAWL_EVENT_MODE";
    RecrawlBehavior["CRAWL_EVERYTHING"] = "CRAWL_EVERYTHING";
    RecrawlBehavior["CRAWL_NEW_FOLDERS_ONLY"] = "CRAWL_NEW_FOLDERS_ONLY";
})(RecrawlBehavior = exports.RecrawlBehavior || (exports.RecrawlBehavior = {}));
var ScheduleState;
(function (ScheduleState) {
    ScheduleState["NOT_SCHEDULED"] = "NOT_SCHEDULED";
    ScheduleState["SCHEDULED"] = "SCHEDULED";
    ScheduleState["TRANSITIONING"] = "TRANSITIONING";
})(ScheduleState = exports.ScheduleState || (exports.ScheduleState = {}));
var DeleteBehavior;
(function (DeleteBehavior) {
    DeleteBehavior["DELETE_FROM_DATABASE"] = "DELETE_FROM_DATABASE";
    DeleteBehavior["DEPRECATE_IN_DATABASE"] = "DEPRECATE_IN_DATABASE";
    DeleteBehavior["LOG"] = "LOG";
})(DeleteBehavior = exports.DeleteBehavior || (exports.DeleteBehavior = {}));
var UpdateBehavior;
(function (UpdateBehavior) {
    UpdateBehavior["LOG"] = "LOG";
    UpdateBehavior["UPDATE_IN_DATABASE"] = "UPDATE_IN_DATABASE";
})(UpdateBehavior = exports.UpdateBehavior || (exports.UpdateBehavior = {}));
var CrawlerState;
(function (CrawlerState) {
    CrawlerState["READY"] = "READY";
    CrawlerState["RUNNING"] = "RUNNING";
    CrawlerState["STOPPING"] = "STOPPING";
})(CrawlerState = exports.CrawlerState || (exports.CrawlerState = {}));
var JdbcMetadataEntry;
(function (JdbcMetadataEntry) {
    JdbcMetadataEntry["COMMENTS"] = "COMMENTS";
    JdbcMetadataEntry["RAWTYPES"] = "RAWTYPES";
})(JdbcMetadataEntry = exports.JdbcMetadataEntry || (exports.JdbcMetadataEntry = {}));
var DataQualityRuleResultStatus;
(function (DataQualityRuleResultStatus) {
    DataQualityRuleResultStatus["ERROR"] = "ERROR";
    DataQualityRuleResultStatus["FAIL"] = "FAIL";
    DataQualityRuleResultStatus["PASS"] = "PASS";
})(DataQualityRuleResultStatus = exports.DataQualityRuleResultStatus || (exports.DataQualityRuleResultStatus = {}));
var WorkerType;
(function (WorkerType) {
    WorkerType["G_025X"] = "G.025X";
    WorkerType["G_1X"] = "G.1X";
    WorkerType["G_2X"] = "G.2X";
    WorkerType["Standard"] = "Standard";
})(WorkerType = exports.WorkerType || (exports.WorkerType = {}));
var StartingPosition;
(function (StartingPosition) {
    StartingPosition["EARLIEST"] = "earliest";
    StartingPosition["LATEST"] = "latest";
    StartingPosition["TRIM_HORIZON"] = "trim_horizon";
})(StartingPosition = exports.StartingPosition || (exports.StartingPosition = {}));
var JDBCConnectionType;
(function (JDBCConnectionType) {
    JDBCConnectionType["mysql"] = "mysql";
    JDBCConnectionType["oracle"] = "oracle";
    JDBCConnectionType["postgresql"] = "postgresql";
    JDBCConnectionType["redshift"] = "redshift";
    JDBCConnectionType["sqlserver"] = "sqlserver";
})(JDBCConnectionType = exports.JDBCConnectionType || (exports.JDBCConnectionType = {}));
var ParamType;
(function (ParamType) {
    ParamType["BOOL"] = "bool";
    ParamType["COMPLEX"] = "complex";
    ParamType["FLOAT"] = "float";
    ParamType["INT"] = "int";
    ParamType["LIST"] = "list";
    ParamType["NULL"] = "null";
    ParamType["STR"] = "str";
})(ParamType = exports.ParamType || (exports.ParamType = {}));
var DQTransformOutput;
(function (DQTransformOutput) {
    DQTransformOutput["EvaluationResults"] = "EvaluationResults";
    DQTransformOutput["PrimaryInput"] = "PrimaryInput";
})(DQTransformOutput = exports.DQTransformOutput || (exports.DQTransformOutput = {}));
var DQStopJobOnFailureTiming;
(function (DQStopJobOnFailureTiming) {
    DQStopJobOnFailureTiming["AfterDataLoad"] = "AfterDataLoad";
    DQStopJobOnFailureTiming["Immediate"] = "Immediate";
})(DQStopJobOnFailureTiming = exports.DQStopJobOnFailureTiming || (exports.DQStopJobOnFailureTiming = {}));
var FilterOperation;
(function (FilterOperation) {
    FilterOperation["EQ"] = "EQ";
    FilterOperation["GT"] = "GT";
    FilterOperation["GTE"] = "GTE";
    FilterOperation["ISNULL"] = "ISNULL";
    FilterOperation["LT"] = "LT";
    FilterOperation["LTE"] = "LTE";
    FilterOperation["REGEX"] = "REGEX";
})(FilterOperation = exports.FilterOperation || (exports.FilterOperation = {}));
var FilterValueType;
(function (FilterValueType) {
    FilterValueType["COLUMNEXTRACTED"] = "COLUMNEXTRACTED";
    FilterValueType["CONSTANT"] = "CONSTANT";
})(FilterValueType = exports.FilterValueType || (exports.FilterValueType = {}));
var FilterLogicalOperator;
(function (FilterLogicalOperator) {
    FilterLogicalOperator["AND"] = "AND";
    FilterLogicalOperator["OR"] = "OR";
})(FilterLogicalOperator = exports.FilterLogicalOperator || (exports.FilterLogicalOperator = {}));
var UpdateCatalogBehavior;
(function (UpdateCatalogBehavior) {
    UpdateCatalogBehavior["LOG"] = "LOG";
    UpdateCatalogBehavior["UPDATE_IN_DATABASE"] = "UPDATE_IN_DATABASE";
})(UpdateCatalogBehavior = exports.UpdateCatalogBehavior || (exports.UpdateCatalogBehavior = {}));
var JDBCDataType;
(function (JDBCDataType) {
    JDBCDataType["ARRAY"] = "ARRAY";
    JDBCDataType["BIGINT"] = "BIGINT";
    JDBCDataType["BINARY"] = "BINARY";
    JDBCDataType["BIT"] = "BIT";
    JDBCDataType["BLOB"] = "BLOB";
    JDBCDataType["BOOLEAN"] = "BOOLEAN";
    JDBCDataType["CHAR"] = "CHAR";
    JDBCDataType["CLOB"] = "CLOB";
    JDBCDataType["DATALINK"] = "DATALINK";
    JDBCDataType["DATE"] = "DATE";
    JDBCDataType["DECIMAL"] = "DECIMAL";
    JDBCDataType["DISTINCT"] = "DISTINCT";
    JDBCDataType["DOUBLE"] = "DOUBLE";
    JDBCDataType["FLOAT"] = "FLOAT";
    JDBCDataType["INTEGER"] = "INTEGER";
    JDBCDataType["JAVA_OBJECT"] = "JAVA_OBJECT";
    JDBCDataType["LONGNVARCHAR"] = "LONGNVARCHAR";
    JDBCDataType["LONGVARBINARY"] = "LONGVARBINARY";
    JDBCDataType["LONGVARCHAR"] = "LONGVARCHAR";
    JDBCDataType["NCHAR"] = "NCHAR";
    JDBCDataType["NCLOB"] = "NCLOB";
    JDBCDataType["NULL"] = "NULL";
    JDBCDataType["NUMERIC"] = "NUMERIC";
    JDBCDataType["NVARCHAR"] = "NVARCHAR";
    JDBCDataType["OTHER"] = "OTHER";
    JDBCDataType["REAL"] = "REAL";
    JDBCDataType["REF"] = "REF";
    JDBCDataType["REF_CURSOR"] = "REF_CURSOR";
    JDBCDataType["ROWID"] = "ROWID";
    JDBCDataType["SMALLINT"] = "SMALLINT";
    JDBCDataType["SQLXML"] = "SQLXML";
    JDBCDataType["STRUCT"] = "STRUCT";
    JDBCDataType["TIME"] = "TIME";
    JDBCDataType["TIMESTAMP"] = "TIMESTAMP";
    JDBCDataType["TIMESTAMP_WITH_TIMEZONE"] = "TIMESTAMP_WITH_TIMEZONE";
    JDBCDataType["TIME_WITH_TIMEZONE"] = "TIME_WITH_TIMEZONE";
    JDBCDataType["TINYINT"] = "TINYINT";
    JDBCDataType["VARBINARY"] = "VARBINARY";
    JDBCDataType["VARCHAR"] = "VARCHAR";
})(JDBCDataType = exports.JDBCDataType || (exports.JDBCDataType = {}));
var GlueRecordType;
(function (GlueRecordType) {
    GlueRecordType["BIGDECIMAL"] = "BIGDECIMAL";
    GlueRecordType["BYTE"] = "BYTE";
    GlueRecordType["DATE"] = "DATE";
    GlueRecordType["DOUBLE"] = "DOUBLE";
    GlueRecordType["FLOAT"] = "FLOAT";
    GlueRecordType["INT"] = "INT";
    GlueRecordType["LONG"] = "LONG";
    GlueRecordType["SHORT"] = "SHORT";
    GlueRecordType["STRING"] = "STRING";
    GlueRecordType["TIMESTAMP"] = "TIMESTAMP";
})(GlueRecordType = exports.GlueRecordType || (exports.GlueRecordType = {}));
var JoinType;
(function (JoinType) {
    JoinType["EQUIJOIN"] = "equijoin";
    JoinType["LEFT"] = "left";
    JoinType["LEFT_ANTI"] = "leftanti";
    JoinType["LEFT_SEMI"] = "leftsemi";
    JoinType["OUTER"] = "outer";
    JoinType["RIGHT"] = "right";
})(JoinType = exports.JoinType || (exports.JoinType = {}));
var PiiType;
(function (PiiType) {
    PiiType["ColumnAudit"] = "ColumnAudit";
    PiiType["ColumnMasking"] = "ColumnMasking";
    PiiType["RowAudit"] = "RowAudit";
    PiiType["RowMasking"] = "RowMasking";
})(PiiType = exports.PiiType || (exports.PiiType = {}));
var CompressionType;
(function (CompressionType) {
    CompressionType["BZIP2"] = "bzip2";
    CompressionType["GZIP"] = "gzip";
})(CompressionType = exports.CompressionType || (exports.CompressionType = {}));
var QuoteChar;
(function (QuoteChar) {
    QuoteChar["DISABLED"] = "disabled";
    QuoteChar["QUILLEMET"] = "quillemet";
    QuoteChar["QUOTE"] = "quote";
    QuoteChar["SINGLE_QUOTE"] = "single_quote";
})(QuoteChar = exports.QuoteChar || (exports.QuoteChar = {}));
var Separator;
(function (Separator) {
    Separator["COMMA"] = "comma";
    Separator["CTRLA"] = "ctrla";
    Separator["PIPE"] = "pipe";
    Separator["SEMICOLON"] = "semicolon";
    Separator["TAB"] = "tab";
})(Separator = exports.Separator || (exports.Separator = {}));
var TargetFormat;
(function (TargetFormat) {
    TargetFormat["AVRO"] = "avro";
    TargetFormat["CSV"] = "csv";
    TargetFormat["HUDI"] = "hudi";
    TargetFormat["JSON"] = "json";
    TargetFormat["ORC"] = "orc";
    TargetFormat["PARQUET"] = "parquet";
})(TargetFormat = exports.TargetFormat || (exports.TargetFormat = {}));
var ParquetCompressionType;
(function (ParquetCompressionType) {
    ParquetCompressionType["GZIP"] = "gzip";
    ParquetCompressionType["LZO"] = "lzo";
    ParquetCompressionType["NONE"] = "none";
    ParquetCompressionType["SNAPPY"] = "snappy";
    ParquetCompressionType["UNCOMPRESSED"] = "uncompressed";
})(ParquetCompressionType = exports.ParquetCompressionType || (exports.ParquetCompressionType = {}));
var HudiTargetCompressionType;
(function (HudiTargetCompressionType) {
    HudiTargetCompressionType["GZIP"] = "gzip";
    HudiTargetCompressionType["LZO"] = "lzo";
    HudiTargetCompressionType["SNAPPY"] = "snappy";
    HudiTargetCompressionType["UNCOMPRESSED"] = "uncompressed";
})(HudiTargetCompressionType = exports.HudiTargetCompressionType || (exports.HudiTargetCompressionType = {}));
var UnionType;
(function (UnionType) {
    UnionType["ALL"] = "ALL";
    UnionType["DISTINCT"] = "DISTINCT";
})(UnionType = exports.UnionType || (exports.UnionType = {}));
var ExecutionClass;
(function (ExecutionClass) {
    ExecutionClass["FLEX"] = "FLEX";
    ExecutionClass["STANDARD"] = "STANDARD";
})(ExecutionClass = exports.ExecutionClass || (exports.ExecutionClass = {}));
var SourceControlAuthStrategy;
(function (SourceControlAuthStrategy) {
    SourceControlAuthStrategy["AWS_SECRETS_MANAGER"] = "AWS_SECRETS_MANAGER";
    SourceControlAuthStrategy["PERSONAL_ACCESS_TOKEN"] = "PERSONAL_ACCESS_TOKEN";
})(SourceControlAuthStrategy = exports.SourceControlAuthStrategy || (exports.SourceControlAuthStrategy = {}));
var SourceControlProvider;
(function (SourceControlProvider) {
    SourceControlProvider["AWS_CODE_COMMIT"] = "AWS_CODE_COMMIT";
    SourceControlProvider["GITHUB"] = "GITHUB";
})(SourceControlProvider = exports.SourceControlProvider || (exports.SourceControlProvider = {}));
class InvalidStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidStateException = InvalidStateException;
var CrawlState;
(function (CrawlState) {
    CrawlState["CANCELLED"] = "CANCELLED";
    CrawlState["CANCELLING"] = "CANCELLING";
    CrawlState["ERROR"] = "ERROR";
    CrawlState["FAILED"] = "FAILED";
    CrawlState["RUNNING"] = "RUNNING";
    CrawlState["SUCCEEDED"] = "SUCCEEDED";
})(CrawlState = exports.CrawlState || (exports.CrawlState = {}));
var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["EQUALS"] = "EQUALS";
})(LogicalOperator = exports.LogicalOperator || (exports.LogicalOperator = {}));
var JobRunState;
(function (JobRunState) {
    JobRunState["ERROR"] = "ERROR";
    JobRunState["FAILED"] = "FAILED";
    JobRunState["RUNNING"] = "RUNNING";
    JobRunState["STARTING"] = "STARTING";
    JobRunState["STOPPED"] = "STOPPED";
    JobRunState["STOPPING"] = "STOPPING";
    JobRunState["SUCCEEDED"] = "SUCCEEDED";
    JobRunState["TIMEOUT"] = "TIMEOUT";
    JobRunState["WAITING"] = "WAITING";
})(JobRunState = exports.JobRunState || (exports.JobRunState = {}));
var Logical;
(function (Logical) {
    Logical["AND"] = "AND";
    Logical["ANY"] = "ANY";
})(Logical = exports.Logical || (exports.Logical = {}));
var TriggerState;
(function (TriggerState) {
    TriggerState["ACTIVATED"] = "ACTIVATED";
    TriggerState["ACTIVATING"] = "ACTIVATING";
    TriggerState["CREATED"] = "CREATED";
    TriggerState["CREATING"] = "CREATING";
    TriggerState["DEACTIVATED"] = "DEACTIVATED";
    TriggerState["DEACTIVATING"] = "DEACTIVATING";
    TriggerState["DELETING"] = "DELETING";
    TriggerState["UPDATING"] = "UPDATING";
})(TriggerState = exports.TriggerState || (exports.TriggerState = {}));
var TriggerType;
(function (TriggerType) {
    TriggerType["CONDITIONAL"] = "CONDITIONAL";
    TriggerType["EVENT"] = "EVENT";
    TriggerType["ON_DEMAND"] = "ON_DEMAND";
    TriggerType["SCHEDULED"] = "SCHEDULED";
})(TriggerType = exports.TriggerType || (exports.TriggerType = {}));
var NodeType;
(function (NodeType) {
    NodeType["CRAWLER"] = "CRAWLER";
    NodeType["JOB"] = "JOB";
    NodeType["TRIGGER"] = "TRIGGER";
})(NodeType = exports.NodeType || (exports.NodeType = {}));
var WorkflowRunStatus;
(function (WorkflowRunStatus) {
    WorkflowRunStatus["COMPLETED"] = "COMPLETED";
    WorkflowRunStatus["ERROR"] = "ERROR";
    WorkflowRunStatus["RUNNING"] = "RUNNING";
    WorkflowRunStatus["STOPPED"] = "STOPPED";
    WorkflowRunStatus["STOPPING"] = "STOPPING";
})(WorkflowRunStatus = exports.WorkflowRunStatus || (exports.WorkflowRunStatus = {}));
var TaskStatusType;
(function (TaskStatusType) {
    TaskStatusType["FAILED"] = "FAILED";
    TaskStatusType["RUNNING"] = "RUNNING";
    TaskStatusType["STARTING"] = "STARTING";
    TaskStatusType["STOPPED"] = "STOPPED";
    TaskStatusType["STOPPING"] = "STOPPING";
    TaskStatusType["SUCCEEDED"] = "SUCCEEDED";
    TaskStatusType["TIMEOUT"] = "TIMEOUT";
})(TaskStatusType = exports.TaskStatusType || (exports.TaskStatusType = {}));
class IllegalSessionStateException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IllegalSessionStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalSessionStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalSessionStateException.prototype);
        this.Message = opts.Message;
    }
}
exports.IllegalSessionStateException = IllegalSessionStateException;
var DataFormat;
(function (DataFormat) {
    DataFormat["AVRO"] = "AVRO";
    DataFormat["JSON"] = "JSON";
    DataFormat["PROTOBUF"] = "PROTOBUF";
})(DataFormat = exports.DataFormat || (exports.DataFormat = {}));
var CsvHeaderOption;
(function (CsvHeaderOption) {
    CsvHeaderOption["ABSENT"] = "ABSENT";
    CsvHeaderOption["PRESENT"] = "PRESENT";
    CsvHeaderOption["UNKNOWN"] = "UNKNOWN";
})(CsvHeaderOption = exports.CsvHeaderOption || (exports.CsvHeaderOption = {}));
var ConnectionPropertyKey;
(function (ConnectionPropertyKey) {
    ConnectionPropertyKey["CONFIG_FILES"] = "CONFIG_FILES";
    ConnectionPropertyKey["CONNECTION_URL"] = "CONNECTION_URL";
    ConnectionPropertyKey["CONNECTOR_CLASS_NAME"] = "CONNECTOR_CLASS_NAME";
    ConnectionPropertyKey["CONNECTOR_TYPE"] = "CONNECTOR_TYPE";
    ConnectionPropertyKey["CONNECTOR_URL"] = "CONNECTOR_URL";
    ConnectionPropertyKey["CUSTOM_JDBC_CERT"] = "CUSTOM_JDBC_CERT";
    ConnectionPropertyKey["CUSTOM_JDBC_CERT_STRING"] = "CUSTOM_JDBC_CERT_STRING";
    ConnectionPropertyKey["ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD"] = "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD";
    ConnectionPropertyKey["ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD"] = "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD";
    ConnectionPropertyKey["ENCRYPTED_PASSWORD"] = "ENCRYPTED_PASSWORD";
    ConnectionPropertyKey["HOST"] = "HOST";
    ConnectionPropertyKey["INSTANCE_ID"] = "INSTANCE_ID";
    ConnectionPropertyKey["JDBC_CONNECTION_URL"] = "JDBC_CONNECTION_URL";
    ConnectionPropertyKey["JDBC_DRIVER_CLASS_NAME"] = "JDBC_DRIVER_CLASS_NAME";
    ConnectionPropertyKey["JDBC_DRIVER_JAR_URI"] = "JDBC_DRIVER_JAR_URI";
    ConnectionPropertyKey["JDBC_ENFORCE_SSL"] = "JDBC_ENFORCE_SSL";
    ConnectionPropertyKey["JDBC_ENGINE"] = "JDBC_ENGINE";
    ConnectionPropertyKey["JDBC_ENGINE_VERSION"] = "JDBC_ENGINE_VERSION";
    ConnectionPropertyKey["KAFKA_BOOTSTRAP_SERVERS"] = "KAFKA_BOOTSTRAP_SERVERS";
    ConnectionPropertyKey["KAFKA_CLIENT_KEYSTORE"] = "KAFKA_CLIENT_KEYSTORE";
    ConnectionPropertyKey["KAFKA_CLIENT_KEYSTORE_PASSWORD"] = "KAFKA_CLIENT_KEYSTORE_PASSWORD";
    ConnectionPropertyKey["KAFKA_CLIENT_KEY_PASSWORD"] = "KAFKA_CLIENT_KEY_PASSWORD";
    ConnectionPropertyKey["KAFKA_CUSTOM_CERT"] = "KAFKA_CUSTOM_CERT";
    ConnectionPropertyKey["KAFKA_SKIP_CUSTOM_CERT_VALIDATION"] = "KAFKA_SKIP_CUSTOM_CERT_VALIDATION";
    ConnectionPropertyKey["KAFKA_SSL_ENABLED"] = "KAFKA_SSL_ENABLED";
    ConnectionPropertyKey["PASSWORD"] = "PASSWORD";
    ConnectionPropertyKey["PORT"] = "PORT";
    ConnectionPropertyKey["SECRET_ID"] = "SECRET_ID";
    ConnectionPropertyKey["SKIP_CUSTOM_JDBC_CERT_VALIDATION"] = "SKIP_CUSTOM_JDBC_CERT_VALIDATION";
    ConnectionPropertyKey["USER_NAME"] = "USERNAME";
})(ConnectionPropertyKey = exports.ConnectionPropertyKey || (exports.ConnectionPropertyKey = {}));
var ConnectionType;
(function (ConnectionType) {
    ConnectionType["CUSTOM"] = "CUSTOM";
    ConnectionType["JDBC"] = "JDBC";
    ConnectionType["KAFKA"] = "KAFKA";
    ConnectionType["MARKETPLACE"] = "MARKETPLACE";
    ConnectionType["MONGODB"] = "MONGODB";
    ConnectionType["NETWORK"] = "NETWORK";
    ConnectionType["SFTP"] = "SFTP";
})(ConnectionType = exports.ConnectionType || (exports.ConnectionType = {}));
class IdempotentParameterMismatchException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
class ConcurrentModificationException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
var Permission;
(function (Permission) {
    Permission["ALL"] = "ALL";
    Permission["ALTER"] = "ALTER";
    Permission["CREATE_DATABASE"] = "CREATE_DATABASE";
    Permission["CREATE_TABLE"] = "CREATE_TABLE";
    Permission["DATA_LOCATION_ACCESS"] = "DATA_LOCATION_ACCESS";
    Permission["DELETE"] = "DELETE";
    Permission["DROP"] = "DROP";
    Permission["INSERT"] = "INSERT";
    Permission["SELECT"] = "SELECT";
})(Permission = exports.Permission || (exports.Permission = {}));
class ValidationException extends GlueServiceException_1.GlueServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
var TransformType;
(function (TransformType) {
    TransformType["FIND_MATCHES"] = "FIND_MATCHES";
})(TransformType = exports.TransformType || (exports.TransformType = {}));
var MLUserDataEncryptionModeString;
(function (MLUserDataEncryptionModeString) {
    MLUserDataEncryptionModeString["DISABLED"] = "DISABLED";
    MLUserDataEncryptionModeString["SSEKMS"] = "SSE-KMS";
})(MLUserDataEncryptionModeString = exports.MLUserDataEncryptionModeString || (exports.MLUserDataEncryptionModeString = {}));
var Compatibility;
(function (Compatibility) {
    Compatibility["BACKWARD"] = "BACKWARD";
    Compatibility["BACKWARD_ALL"] = "BACKWARD_ALL";
    Compatibility["DISABLED"] = "DISABLED";
    Compatibility["FORWARD"] = "FORWARD";
    Compatibility["FORWARD_ALL"] = "FORWARD_ALL";
    Compatibility["FULL"] = "FULL";
    Compatibility["FULL_ALL"] = "FULL_ALL";
    Compatibility["NONE"] = "NONE";
})(Compatibility = exports.Compatibility || (exports.Compatibility = {}));
var SchemaStatus;
(function (SchemaStatus) {
    SchemaStatus["AVAILABLE"] = "AVAILABLE";
    SchemaStatus["DELETING"] = "DELETING";
    SchemaStatus["PENDING"] = "PENDING";
})(SchemaStatus = exports.SchemaStatus || (exports.SchemaStatus = {}));
var SchemaVersionStatus;
(function (SchemaVersionStatus) {
    SchemaVersionStatus["AVAILABLE"] = "AVAILABLE";
    SchemaVersionStatus["DELETING"] = "DELETING";
    SchemaVersionStatus["FAILURE"] = "FAILURE";
    SchemaVersionStatus["PENDING"] = "PENDING";
})(SchemaVersionStatus = exports.SchemaVersionStatus || (exports.SchemaVersionStatus = {}));
const NotificationPropertyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NotificationPropertyFilterSensitiveLog = NotificationPropertyFilterSensitiveLog;
const ActionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ActionFilterSensitiveLog = ActionFilterSensitiveLog;
const AggregateOperationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AggregateOperationFilterSensitiveLog = AggregateOperationFilterSensitiveLog;
const AggregateFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AggregateFilterSensitiveLog = AggregateFilterSensitiveLog;
const GlueStudioSchemaColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GlueStudioSchemaColumnFilterSensitiveLog = GlueStudioSchemaColumnFilterSensitiveLog;
const GlueSchemaFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GlueSchemaFilterSensitiveLog = GlueSchemaFilterSensitiveLog;
const AthenaConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AthenaConnectorSourceFilterSensitiveLog = AthenaConnectorSourceFilterSensitiveLog;
const AuditContextFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AuditContextFilterSensitiveLog = AuditContextFilterSensitiveLog;
const ColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ColumnFilterSensitiveLog = ColumnFilterSensitiveLog;
const SchemaIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SchemaIdFilterSensitiveLog = SchemaIdFilterSensitiveLog;
const SchemaReferenceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SchemaReferenceFilterSensitiveLog = SchemaReferenceFilterSensitiveLog;
const SerDeInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SerDeInfoFilterSensitiveLog = SerDeInfoFilterSensitiveLog;
const SkewedInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SkewedInfoFilterSensitiveLog = SkewedInfoFilterSensitiveLog;
const OrderFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OrderFilterSensitiveLog = OrderFilterSensitiveLog;
const StorageDescriptorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StorageDescriptorFilterSensitiveLog = StorageDescriptorFilterSensitiveLog;
const PartitionInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PartitionInputFilterSensitiveLog = PartitionInputFilterSensitiveLog;
const BatchCreatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchCreatePartitionRequestFilterSensitiveLog = BatchCreatePartitionRequestFilterSensitiveLog;
const ErrorDetailFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ErrorDetailFilterSensitiveLog = ErrorDetailFilterSensitiveLog;
const PartitionErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PartitionErrorFilterSensitiveLog = PartitionErrorFilterSensitiveLog;
const BatchCreatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchCreatePartitionResponseFilterSensitiveLog = BatchCreatePartitionResponseFilterSensitiveLog;
const BatchDeleteConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteConnectionRequestFilterSensitiveLog = BatchDeleteConnectionRequestFilterSensitiveLog;
const BatchDeleteConnectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteConnectionResponseFilterSensitiveLog = BatchDeleteConnectionResponseFilterSensitiveLog;
const PartitionValueListFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PartitionValueListFilterSensitiveLog = PartitionValueListFilterSensitiveLog;
const BatchDeletePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeletePartitionRequestFilterSensitiveLog = BatchDeletePartitionRequestFilterSensitiveLog;
const BatchDeletePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeletePartitionResponseFilterSensitiveLog = BatchDeletePartitionResponseFilterSensitiveLog;
const BatchDeleteTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteTableRequestFilterSensitiveLog = BatchDeleteTableRequestFilterSensitiveLog;
const TableErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TableErrorFilterSensitiveLog = TableErrorFilterSensitiveLog;
const BatchDeleteTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteTableResponseFilterSensitiveLog = BatchDeleteTableResponseFilterSensitiveLog;
const BatchDeleteTableVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteTableVersionRequestFilterSensitiveLog = BatchDeleteTableVersionRequestFilterSensitiveLog;
const TableVersionErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TableVersionErrorFilterSensitiveLog = TableVersionErrorFilterSensitiveLog;
const BatchDeleteTableVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchDeleteTableVersionResponseFilterSensitiveLog = BatchDeleteTableVersionResponseFilterSensitiveLog;
const BatchGetBlueprintsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetBlueprintsRequestFilterSensitiveLog = BatchGetBlueprintsRequestFilterSensitiveLog;
const LastActiveDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LastActiveDefinitionFilterSensitiveLog = LastActiveDefinitionFilterSensitiveLog;
const BlueprintFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BlueprintFilterSensitiveLog = BlueprintFilterSensitiveLog;
const BatchGetBlueprintsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetBlueprintsResponseFilterSensitiveLog = BatchGetBlueprintsResponseFilterSensitiveLog;
const BatchGetCrawlersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetCrawlersRequestFilterSensitiveLog = BatchGetCrawlersRequestFilterSensitiveLog;
const LakeFormationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LakeFormationConfigurationFilterSensitiveLog = LakeFormationConfigurationFilterSensitiveLog;
const LastCrawlInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LastCrawlInfoFilterSensitiveLog = LastCrawlInfoFilterSensitiveLog;
const LineageConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LineageConfigurationFilterSensitiveLog = LineageConfigurationFilterSensitiveLog;
const RecrawlPolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RecrawlPolicyFilterSensitiveLog = RecrawlPolicyFilterSensitiveLog;
const ScheduleFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ScheduleFilterSensitiveLog = ScheduleFilterSensitiveLog;
const SchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SchemaChangePolicyFilterSensitiveLog = SchemaChangePolicyFilterSensitiveLog;
const CatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogTargetFilterSensitiveLog = CatalogTargetFilterSensitiveLog;
const DeltaTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeltaTargetFilterSensitiveLog = DeltaTargetFilterSensitiveLog;
const DynamoDBTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DynamoDBTargetFilterSensitiveLog = DynamoDBTargetFilterSensitiveLog;
const JdbcTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JdbcTargetFilterSensitiveLog = JdbcTargetFilterSensitiveLog;
const MongoDBTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MongoDBTargetFilterSensitiveLog = MongoDBTargetFilterSensitiveLog;
const S3TargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3TargetFilterSensitiveLog = S3TargetFilterSensitiveLog;
const CrawlerTargetsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CrawlerTargetsFilterSensitiveLog = CrawlerTargetsFilterSensitiveLog;
const CrawlerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CrawlerFilterSensitiveLog = CrawlerFilterSensitiveLog;
const BatchGetCrawlersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetCrawlersResponseFilterSensitiveLog = BatchGetCrawlersResponseFilterSensitiveLog;
const BatchGetCustomEntityTypesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetCustomEntityTypesRequestFilterSensitiveLog = BatchGetCustomEntityTypesRequestFilterSensitiveLog;
const CustomEntityTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CustomEntityTypeFilterSensitiveLog = CustomEntityTypeFilterSensitiveLog;
const BatchGetCustomEntityTypesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetCustomEntityTypesResponseFilterSensitiveLog = BatchGetCustomEntityTypesResponseFilterSensitiveLog;
const BatchGetDataQualityResultRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetDataQualityResultRequestFilterSensitiveLog = BatchGetDataQualityResultRequestFilterSensitiveLog;
const GlueTableFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GlueTableFilterSensitiveLog = GlueTableFilterSensitiveLog;
const DataSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DataSourceFilterSensitiveLog = DataSourceFilterSensitiveLog;
const DataQualityRuleResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DataQualityRuleResultFilterSensitiveLog = DataQualityRuleResultFilterSensitiveLog;
const DataQualityResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DataQualityResultFilterSensitiveLog = DataQualityResultFilterSensitiveLog;
const BatchGetDataQualityResultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetDataQualityResultResponseFilterSensitiveLog = BatchGetDataQualityResultResponseFilterSensitiveLog;
const BatchGetDevEndpointsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetDevEndpointsRequestFilterSensitiveLog = BatchGetDevEndpointsRequestFilterSensitiveLog;
const DevEndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DevEndpointFilterSensitiveLog = DevEndpointFilterSensitiveLog;
const BatchGetDevEndpointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetDevEndpointsResponseFilterSensitiveLog = BatchGetDevEndpointsResponseFilterSensitiveLog;
const BatchGetJobsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetJobsRequestFilterSensitiveLog = BatchGetJobsRequestFilterSensitiveLog;
const CatalogHudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogHudiSourceFilterSensitiveLog = CatalogHudiSourceFilterSensitiveLog;
const StreamingDataPreviewOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StreamingDataPreviewOptionsFilterSensitiveLog = StreamingDataPreviewOptionsFilterSensitiveLog;
const KafkaStreamingSourceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.KafkaStreamingSourceOptionsFilterSensitiveLog = KafkaStreamingSourceOptionsFilterSensitiveLog;
const CatalogKafkaSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogKafkaSourceFilterSensitiveLog = CatalogKafkaSourceFilterSensitiveLog;
const KinesisStreamingSourceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.KinesisStreamingSourceOptionsFilterSensitiveLog = KinesisStreamingSourceOptionsFilterSensitiveLog;
const CatalogKinesisSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogKinesisSourceFilterSensitiveLog = CatalogKinesisSourceFilterSensitiveLog;
const CatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogSourceFilterSensitiveLog = CatalogSourceFilterSensitiveLog;
const BasicCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BasicCatalogTargetFilterSensitiveLog = BasicCatalogTargetFilterSensitiveLog;
const CustomCodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CustomCodeFilterSensitiveLog = CustomCodeFilterSensitiveLog;
const DirectJDBCSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DirectJDBCSourceFilterSensitiveLog = DirectJDBCSourceFilterSensitiveLog;
const DirectKafkaSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DirectKafkaSourceFilterSensitiveLog = DirectKafkaSourceFilterSensitiveLog;
const DirectKinesisSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DirectKinesisSourceFilterSensitiveLog = DirectKinesisSourceFilterSensitiveLog;
const DropDuplicatesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DropDuplicatesFilterSensitiveLog = DropDuplicatesFilterSensitiveLog;
const DropFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DropFieldsFilterSensitiveLog = DropFieldsFilterSensitiveLog;
const NullCheckBoxListFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NullCheckBoxListFilterSensitiveLog = NullCheckBoxListFilterSensitiveLog;
const DatatypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DatatypeFilterSensitiveLog = DatatypeFilterSensitiveLog;
const NullValueFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NullValueFieldFilterSensitiveLog = NullValueFieldFilterSensitiveLog;
const DropNullFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DropNullFieldsFilterSensitiveLog = DropNullFieldsFilterSensitiveLog;
const TransformConfigParameterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TransformConfigParameterFilterSensitiveLog = TransformConfigParameterFilterSensitiveLog;
const DynamicTransformFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DynamicTransformFilterSensitiveLog = DynamicTransformFilterSensitiveLog;
const DynamoDBCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DynamoDBCatalogSourceFilterSensitiveLog = DynamoDBCatalogSourceFilterSensitiveLog;
const DQResultsPublishingOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DQResultsPublishingOptionsFilterSensitiveLog = DQResultsPublishingOptionsFilterSensitiveLog;
const DQStopJobOnFailureOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DQStopJobOnFailureOptionsFilterSensitiveLog = DQStopJobOnFailureOptionsFilterSensitiveLog;
const EvaluateDataQualityFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EvaluateDataQualityFilterSensitiveLog = EvaluateDataQualityFilterSensitiveLog;
const FillMissingValuesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FillMissingValuesFilterSensitiveLog = FillMissingValuesFilterSensitiveLog;
const FilterValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FilterValueFilterSensitiveLog = FilterValueFilterSensitiveLog;
const FilterExpressionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FilterExpressionFilterSensitiveLog = FilterExpressionFilterSensitiveLog;
const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FilterFilterSensitiveLog = FilterFilterSensitiveLog;
const S3SourceAdditionalOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3SourceAdditionalOptionsFilterSensitiveLog = S3SourceAdditionalOptionsFilterSensitiveLog;
const GovernedCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GovernedCatalogSourceFilterSensitiveLog = GovernedCatalogSourceFilterSensitiveLog;
const CatalogSchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CatalogSchemaChangePolicyFilterSensitiveLog = CatalogSchemaChangePolicyFilterSensitiveLog;
const GovernedCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GovernedCatalogTargetFilterSensitiveLog = GovernedCatalogTargetFilterSensitiveLog;
const JDBCConnectorOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JDBCConnectorOptionsFilterSensitiveLog = JDBCConnectorOptionsFilterSensitiveLog;
const JDBCConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JDBCConnectorSourceFilterSensitiveLog = JDBCConnectorSourceFilterSensitiveLog;
const JDBCConnectorTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JDBCConnectorTargetFilterSensitiveLog = JDBCConnectorTargetFilterSensitiveLog;
const JoinColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JoinColumnFilterSensitiveLog = JoinColumnFilterSensitiveLog;
const JoinFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JoinFilterSensitiveLog = JoinFilterSensitiveLog;
const MergeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MergeFilterSensitiveLog = MergeFilterSensitiveLog;
const MicrosoftSQLServerCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MicrosoftSQLServerCatalogSourceFilterSensitiveLog = MicrosoftSQLServerCatalogSourceFilterSensitiveLog;
const MicrosoftSQLServerCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MicrosoftSQLServerCatalogTargetFilterSensitiveLog = MicrosoftSQLServerCatalogTargetFilterSensitiveLog;
const MySQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MySQLCatalogSourceFilterSensitiveLog = MySQLCatalogSourceFilterSensitiveLog;
const MySQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MySQLCatalogTargetFilterSensitiveLog = MySQLCatalogTargetFilterSensitiveLog;
const OracleSQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OracleSQLCatalogSourceFilterSensitiveLog = OracleSQLCatalogSourceFilterSensitiveLog;
const OracleSQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.OracleSQLCatalogTargetFilterSensitiveLog = OracleSQLCatalogTargetFilterSensitiveLog;
const PIIDetectionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PIIDetectionFilterSensitiveLog = PIIDetectionFilterSensitiveLog;
const PostgreSQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PostgreSQLCatalogSourceFilterSensitiveLog = PostgreSQLCatalogSourceFilterSensitiveLog;
const PostgreSQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PostgreSQLCatalogTargetFilterSensitiveLog = PostgreSQLCatalogTargetFilterSensitiveLog;
const RedshiftSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RedshiftSourceFilterSensitiveLog = RedshiftSourceFilterSensitiveLog;
const UpsertRedshiftTargetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpsertRedshiftTargetOptionsFilterSensitiveLog = UpsertRedshiftTargetOptionsFilterSensitiveLog;
const RedshiftTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RedshiftTargetFilterSensitiveLog = RedshiftTargetFilterSensitiveLog;
const RelationalCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RelationalCatalogSourceFilterSensitiveLog = RelationalCatalogSourceFilterSensitiveLog;
const RenameFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RenameFieldFilterSensitiveLog = RenameFieldFilterSensitiveLog;
const S3CatalogHudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3CatalogHudiSourceFilterSensitiveLog = S3CatalogHudiSourceFilterSensitiveLog;
const S3CatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3CatalogSourceFilterSensitiveLog = S3CatalogSourceFilterSensitiveLog;
const S3CatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3CatalogTargetFilterSensitiveLog = S3CatalogTargetFilterSensitiveLog;
const S3DirectSourceAdditionalOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3DirectSourceAdditionalOptionsFilterSensitiveLog = S3DirectSourceAdditionalOptionsFilterSensitiveLog;
const S3CsvSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3CsvSourceFilterSensitiveLog = S3CsvSourceFilterSensitiveLog;
const DirectSchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DirectSchemaChangePolicyFilterSensitiveLog = DirectSchemaChangePolicyFilterSensitiveLog;
const S3DirectTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3DirectTargetFilterSensitiveLog = S3DirectTargetFilterSensitiveLog;
const S3GlueParquetTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3GlueParquetTargetFilterSensitiveLog = S3GlueParquetTargetFilterSensitiveLog;
const S3HudiCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3HudiCatalogTargetFilterSensitiveLog = S3HudiCatalogTargetFilterSensitiveLog;
const S3HudiDirectTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3HudiDirectTargetFilterSensitiveLog = S3HudiDirectTargetFilterSensitiveLog;
const S3HudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3HudiSourceFilterSensitiveLog = S3HudiSourceFilterSensitiveLog;
const S3JsonSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3JsonSourceFilterSensitiveLog = S3JsonSourceFilterSensitiveLog;
const S3ParquetSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3ParquetSourceFilterSensitiveLog = S3ParquetSourceFilterSensitiveLog;
const SelectFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SelectFieldsFilterSensitiveLog = SelectFieldsFilterSensitiveLog;
const SelectFromCollectionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SelectFromCollectionFilterSensitiveLog = SelectFromCollectionFilterSensitiveLog;
const SparkConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SparkConnectorSourceFilterSensitiveLog = SparkConnectorSourceFilterSensitiveLog;
const SparkConnectorTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SparkConnectorTargetFilterSensitiveLog = SparkConnectorTargetFilterSensitiveLog;
const SqlAliasFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SqlAliasFilterSensitiveLog = SqlAliasFilterSensitiveLog;
const SparkSQLFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SparkSQLFilterSensitiveLog = SparkSQLFilterSensitiveLog;
const SpigotFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SpigotFilterSensitiveLog = SpigotFilterSensitiveLog;
const SplitFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SplitFieldsFilterSensitiveLog = SplitFieldsFilterSensitiveLog;
const UnionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UnionFilterSensitiveLog = UnionFilterSensitiveLog;
const JobCommandFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JobCommandFilterSensitiveLog = JobCommandFilterSensitiveLog;
const ConnectionsListFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ConnectionsListFilterSensitiveLog = ConnectionsListFilterSensitiveLog;
const ExecutionPropertyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecutionPropertyFilterSensitiveLog = ExecutionPropertyFilterSensitiveLog;
const SourceControlDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SourceControlDetailsFilterSensitiveLog = SourceControlDetailsFilterSensitiveLog;
const BatchGetPartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetPartitionRequestFilterSensitiveLog = BatchGetPartitionRequestFilterSensitiveLog;
const PartitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PartitionFilterSensitiveLog = PartitionFilterSensitiveLog;
const BatchGetPartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetPartitionResponseFilterSensitiveLog = BatchGetPartitionResponseFilterSensitiveLog;
const BatchGetTriggersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetTriggersRequestFilterSensitiveLog = BatchGetTriggersRequestFilterSensitiveLog;
const EventBatchingConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EventBatchingConditionFilterSensitiveLog = EventBatchingConditionFilterSensitiveLog;
const ConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ConditionFilterSensitiveLog = ConditionFilterSensitiveLog;
const PredicateFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PredicateFilterSensitiveLog = PredicateFilterSensitiveLog;
const TriggerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TriggerFilterSensitiveLog = TriggerFilterSensitiveLog;
const BatchGetTriggersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetTriggersResponseFilterSensitiveLog = BatchGetTriggersResponseFilterSensitiveLog;
const BatchGetWorkflowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetWorkflowsRequestFilterSensitiveLog = BatchGetWorkflowsRequestFilterSensitiveLog;
const BlueprintDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BlueprintDetailsFilterSensitiveLog = BlueprintDetailsFilterSensitiveLog;
const EdgeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EdgeFilterSensitiveLog = EdgeFilterSensitiveLog;
const CrawlFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CrawlFilterSensitiveLog = CrawlFilterSensitiveLog;
const CrawlerNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CrawlerNodeDetailsFilterSensitiveLog = CrawlerNodeDetailsFilterSensitiveLog;
const PredecessorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PredecessorFilterSensitiveLog = PredecessorFilterSensitiveLog;
const JobRunFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JobRunFilterSensitiveLog = JobRunFilterSensitiveLog;
const JobNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.JobNodeDetailsFilterSensitiveLog = JobNodeDetailsFilterSensitiveLog;
const TriggerNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TriggerNodeDetailsFilterSensitiveLog = TriggerNodeDetailsFilterSensitiveLog;
const NodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NodeFilterSensitiveLog = NodeFilterSensitiveLog;
const WorkflowGraphFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WorkflowGraphFilterSensitiveLog = WorkflowGraphFilterSensitiveLog;
const StartingEventBatchConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartingEventBatchConditionFilterSensitiveLog = StartingEventBatchConditionFilterSensitiveLog;
const WorkflowRunStatisticsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WorkflowRunStatisticsFilterSensitiveLog = WorkflowRunStatisticsFilterSensitiveLog;
const WorkflowRunFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WorkflowRunFilterSensitiveLog = WorkflowRunFilterSensitiveLog;
const WorkflowFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WorkflowFilterSensitiveLog = WorkflowFilterSensitiveLog;
const BatchGetWorkflowsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchGetWorkflowsResponseFilterSensitiveLog = BatchGetWorkflowsResponseFilterSensitiveLog;
const BatchStopJobRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchStopJobRunRequestFilterSensitiveLog = BatchStopJobRunRequestFilterSensitiveLog;
const BatchStopJobRunErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchStopJobRunErrorFilterSensitiveLog = BatchStopJobRunErrorFilterSensitiveLog;
const BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog = BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog;
const BatchStopJobRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchStopJobRunResponseFilterSensitiveLog = BatchStopJobRunResponseFilterSensitiveLog;
const BatchUpdatePartitionRequestEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchUpdatePartitionRequestEntryFilterSensitiveLog = BatchUpdatePartitionRequestEntryFilterSensitiveLog;
const BatchUpdatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchUpdatePartitionRequestFilterSensitiveLog = BatchUpdatePartitionRequestFilterSensitiveLog;
const BatchUpdatePartitionFailureEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchUpdatePartitionFailureEntryFilterSensitiveLog = BatchUpdatePartitionFailureEntryFilterSensitiveLog;
const BatchUpdatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.BatchUpdatePartitionResponseFilterSensitiveLog = BatchUpdatePartitionResponseFilterSensitiveLog;
const CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog = CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog;
const CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog = CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog;
const CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog = CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog;
const CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog = CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog;
const CancelMLTaskRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelMLTaskRunRequestFilterSensitiveLog = CancelMLTaskRunRequestFilterSensitiveLog;
const CancelMLTaskRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelMLTaskRunResponseFilterSensitiveLog = CancelMLTaskRunResponseFilterSensitiveLog;
const CancelStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelStatementRequestFilterSensitiveLog = CancelStatementRequestFilterSensitiveLog;
const CancelStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CancelStatementResponseFilterSensitiveLog = CancelStatementResponseFilterSensitiveLog;
const CheckSchemaVersionValidityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CheckSchemaVersionValidityInputFilterSensitiveLog = CheckSchemaVersionValidityInputFilterSensitiveLog;
const CheckSchemaVersionValidityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CheckSchemaVersionValidityResponseFilterSensitiveLog = CheckSchemaVersionValidityResponseFilterSensitiveLog;
const CreateBlueprintRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateBlueprintRequestFilterSensitiveLog = CreateBlueprintRequestFilterSensitiveLog;
const CreateBlueprintResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateBlueprintResponseFilterSensitiveLog = CreateBlueprintResponseFilterSensitiveLog;
const CreateCsvClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCsvClassifierRequestFilterSensitiveLog = CreateCsvClassifierRequestFilterSensitiveLog;
const CreateGrokClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateGrokClassifierRequestFilterSensitiveLog = CreateGrokClassifierRequestFilterSensitiveLog;
const CreateJsonClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateJsonClassifierRequestFilterSensitiveLog = CreateJsonClassifierRequestFilterSensitiveLog;
const CreateXMLClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateXMLClassifierRequestFilterSensitiveLog = CreateXMLClassifierRequestFilterSensitiveLog;
const CreateClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateClassifierRequestFilterSensitiveLog = CreateClassifierRequestFilterSensitiveLog;
const CreateClassifierResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateClassifierResponseFilterSensitiveLog = CreateClassifierResponseFilterSensitiveLog;
const PhysicalConnectionRequirementsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PhysicalConnectionRequirementsFilterSensitiveLog = PhysicalConnectionRequirementsFilterSensitiveLog;
const ConnectionInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ConnectionInputFilterSensitiveLog = ConnectionInputFilterSensitiveLog;
const CreateConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateConnectionRequestFilterSensitiveLog = CreateConnectionRequestFilterSensitiveLog;
const CreateConnectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateConnectionResponseFilterSensitiveLog = CreateConnectionResponseFilterSensitiveLog;
const CreateCrawlerRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCrawlerRequestFilterSensitiveLog = CreateCrawlerRequestFilterSensitiveLog;
const CreateCrawlerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCrawlerResponseFilterSensitiveLog = CreateCrawlerResponseFilterSensitiveLog;
const CreateCustomEntityTypeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCustomEntityTypeRequestFilterSensitiveLog = CreateCustomEntityTypeRequestFilterSensitiveLog;
const CreateCustomEntityTypeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCustomEntityTypeResponseFilterSensitiveLog = CreateCustomEntityTypeResponseFilterSensitiveLog;
const DataLakePrincipalFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DataLakePrincipalFilterSensitiveLog = DataLakePrincipalFilterSensitiveLog;
const PrincipalPermissionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PrincipalPermissionsFilterSensitiveLog = PrincipalPermissionsFilterSensitiveLog;
const DatabaseIdentifierFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DatabaseIdentifierFilterSensitiveLog = DatabaseIdentifierFilterSensitiveLog;
const DatabaseInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DatabaseInputFilterSensitiveLog = DatabaseInputFilterSensitiveLog;
const CreateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDatabaseRequestFilterSensitiveLog = CreateDatabaseRequestFilterSensitiveLog;
const CreateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDatabaseResponseFilterSensitiveLog = CreateDatabaseResponseFilterSensitiveLog;
const DataQualityTargetTableFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DataQualityTargetTableFilterSensitiveLog = DataQualityTargetTableFilterSensitiveLog;
const CreateDataQualityRulesetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDataQualityRulesetRequestFilterSensitiveLog = CreateDataQualityRulesetRequestFilterSensitiveLog;
const CreateDataQualityRulesetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDataQualityRulesetResponseFilterSensitiveLog = CreateDataQualityRulesetResponseFilterSensitiveLog;
const CreateDevEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDevEndpointRequestFilterSensitiveLog = CreateDevEndpointRequestFilterSensitiveLog;
const CreateDevEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDevEndpointResponseFilterSensitiveLog = CreateDevEndpointResponseFilterSensitiveLog;
const CreateJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateJobResponseFilterSensitiveLog = CreateJobResponseFilterSensitiveLog;
const FindMatchesParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FindMatchesParametersFilterSensitiveLog = FindMatchesParametersFilterSensitiveLog;
const TransformParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TransformParametersFilterSensitiveLog = TransformParametersFilterSensitiveLog;
const MLUserDataEncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MLUserDataEncryptionFilterSensitiveLog = MLUserDataEncryptionFilterSensitiveLog;
const TransformEncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TransformEncryptionFilterSensitiveLog = TransformEncryptionFilterSensitiveLog;
const CreateMLTransformRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateMLTransformRequestFilterSensitiveLog = CreateMLTransformRequestFilterSensitiveLog;
const CreateMLTransformResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateMLTransformResponseFilterSensitiveLog = CreateMLTransformResponseFilterSensitiveLog;
const CreatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreatePartitionRequestFilterSensitiveLog = CreatePartitionRequestFilterSensitiveLog;
const CreatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreatePartitionResponseFilterSensitiveLog = CreatePartitionResponseFilterSensitiveLog;
const PartitionIndexFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PartitionIndexFilterSensitiveLog = PartitionIndexFilterSensitiveLog;
const CreatePartitionIndexRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreatePartitionIndexRequestFilterSensitiveLog = CreatePartitionIndexRequestFilterSensitiveLog;
const CreatePartitionIndexResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreatePartitionIndexResponseFilterSensitiveLog = CreatePartitionIndexResponseFilterSensitiveLog;
const CreateRegistryInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateRegistryInputFilterSensitiveLog = CreateRegistryInputFilterSensitiveLog;
const CreateRegistryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateRegistryResponseFilterSensitiveLog = CreateRegistryResponseFilterSensitiveLog;
const RegistryIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RegistryIdFilterSensitiveLog = RegistryIdFilterSensitiveLog;
const CreateSchemaInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateSchemaInputFilterSensitiveLog = CreateSchemaInputFilterSensitiveLog;
const CreateSchemaResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateSchemaResponseFilterSensitiveLog = CreateSchemaResponseFilterSensitiveLog;
const CodeGenEdgeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CodeGenEdgeFilterSensitiveLog = CodeGenEdgeFilterSensitiveLog;
const CodeGenNodeArgFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CodeGenNodeArgFilterSensitiveLog = CodeGenNodeArgFilterSensitiveLog;
const CodeGenNodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CodeGenNodeFilterSensitiveLog = CodeGenNodeFilterSensitiveLog;
