"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Glue = void 0;
const BatchCreatePartitionCommand_1 = require("./commands/BatchCreatePartitionCommand");
const BatchDeleteConnectionCommand_1 = require("./commands/BatchDeleteConnectionCommand");
const BatchDeletePartitionCommand_1 = require("./commands/BatchDeletePartitionCommand");
const BatchDeleteTableCommand_1 = require("./commands/BatchDeleteTableCommand");
const BatchDeleteTableVersionCommand_1 = require("./commands/BatchDeleteTableVersionCommand");
const BatchGetBlueprintsCommand_1 = require("./commands/BatchGetBlueprintsCommand");
const BatchGetCrawlersCommand_1 = require("./commands/BatchGetCrawlersCommand");
const BatchGetCustomEntityTypesCommand_1 = require("./commands/BatchGetCustomEntityTypesCommand");
const BatchGetDataQualityResultCommand_1 = require("./commands/BatchGetDataQualityResultCommand");
const BatchGetDevEndpointsCommand_1 = require("./commands/BatchGetDevEndpointsCommand");
const BatchGetJobsCommand_1 = require("./commands/BatchGetJobsCommand");
const BatchGetPartitionCommand_1 = require("./commands/BatchGetPartitionCommand");
const BatchGetTriggersCommand_1 = require("./commands/BatchGetTriggersCommand");
const BatchGetWorkflowsCommand_1 = require("./commands/BatchGetWorkflowsCommand");
const BatchStopJobRunCommand_1 = require("./commands/BatchStopJobRunCommand");
const BatchUpdatePartitionCommand_1 = require("./commands/BatchUpdatePartitionCommand");
const CancelDataQualityRuleRecommendationRunCommand_1 = require("./commands/CancelDataQualityRuleRecommendationRunCommand");
const CancelDataQualityRulesetEvaluationRunCommand_1 = require("./commands/CancelDataQualityRulesetEvaluationRunCommand");
const CancelMLTaskRunCommand_1 = require("./commands/CancelMLTaskRunCommand");
const CancelStatementCommand_1 = require("./commands/CancelStatementCommand");
const CheckSchemaVersionValidityCommand_1 = require("./commands/CheckSchemaVersionValidityCommand");
const CreateBlueprintCommand_1 = require("./commands/CreateBlueprintCommand");
const CreateClassifierCommand_1 = require("./commands/CreateClassifierCommand");
const CreateConnectionCommand_1 = require("./commands/CreateConnectionCommand");
const CreateCrawlerCommand_1 = require("./commands/CreateCrawlerCommand");
const CreateCustomEntityTypeCommand_1 = require("./commands/CreateCustomEntityTypeCommand");
const CreateDatabaseCommand_1 = require("./commands/CreateDatabaseCommand");
const CreateDataQualityRulesetCommand_1 = require("./commands/CreateDataQualityRulesetCommand");
const CreateDevEndpointCommand_1 = require("./commands/CreateDevEndpointCommand");
const CreateJobCommand_1 = require("./commands/CreateJobCommand");
const CreateMLTransformCommand_1 = require("./commands/CreateMLTransformCommand");
const CreatePartitionCommand_1 = require("./commands/CreatePartitionCommand");
const CreatePartitionIndexCommand_1 = require("./commands/CreatePartitionIndexCommand");
const CreateRegistryCommand_1 = require("./commands/CreateRegistryCommand");
const CreateSchemaCommand_1 = require("./commands/CreateSchemaCommand");
const CreateScriptCommand_1 = require("./commands/CreateScriptCommand");
const CreateSecurityConfigurationCommand_1 = require("./commands/CreateSecurityConfigurationCommand");
const CreateSessionCommand_1 = require("./commands/CreateSessionCommand");
const CreateTableCommand_1 = require("./commands/CreateTableCommand");
const CreateTriggerCommand_1 = require("./commands/CreateTriggerCommand");
const CreateUserDefinedFunctionCommand_1 = require("./commands/CreateUserDefinedFunctionCommand");
const CreateWorkflowCommand_1 = require("./commands/CreateWorkflowCommand");
const DeleteBlueprintCommand_1 = require("./commands/DeleteBlueprintCommand");
const DeleteClassifierCommand_1 = require("./commands/DeleteClassifierCommand");
const DeleteColumnStatisticsForPartitionCommand_1 = require("./commands/DeleteColumnStatisticsForPartitionCommand");
const DeleteColumnStatisticsForTableCommand_1 = require("./commands/DeleteColumnStatisticsForTableCommand");
const DeleteConnectionCommand_1 = require("./commands/DeleteConnectionCommand");
const DeleteCrawlerCommand_1 = require("./commands/DeleteCrawlerCommand");
const DeleteCustomEntityTypeCommand_1 = require("./commands/DeleteCustomEntityTypeCommand");
const DeleteDatabaseCommand_1 = require("./commands/DeleteDatabaseCommand");
const DeleteDataQualityRulesetCommand_1 = require("./commands/DeleteDataQualityRulesetCommand");
const DeleteDevEndpointCommand_1 = require("./commands/DeleteDevEndpointCommand");
const DeleteJobCommand_1 = require("./commands/DeleteJobCommand");
const DeleteMLTransformCommand_1 = require("./commands/DeleteMLTransformCommand");
const DeletePartitionCommand_1 = require("./commands/DeletePartitionCommand");
const DeletePartitionIndexCommand_1 = require("./commands/DeletePartitionIndexCommand");
const DeleteRegistryCommand_1 = require("./commands/DeleteRegistryCommand");
const DeleteResourcePolicyCommand_1 = require("./commands/DeleteResourcePolicyCommand");
const DeleteSchemaCommand_1 = require("./commands/DeleteSchemaCommand");
const DeleteSchemaVersionsCommand_1 = require("./commands/DeleteSchemaVersionsCommand");
const DeleteSecurityConfigurationCommand_1 = require("./commands/DeleteSecurityConfigurationCommand");
const DeleteSessionCommand_1 = require("./commands/DeleteSessionCommand");
const DeleteTableCommand_1 = require("./commands/DeleteTableCommand");
const DeleteTableVersionCommand_1 = require("./commands/DeleteTableVersionCommand");
const DeleteTriggerCommand_1 = require("./commands/DeleteTriggerCommand");
const DeleteUserDefinedFunctionCommand_1 = require("./commands/DeleteUserDefinedFunctionCommand");
const DeleteWorkflowCommand_1 = require("./commands/DeleteWorkflowCommand");
const GetBlueprintCommand_1 = require("./commands/GetBlueprintCommand");
const GetBlueprintRunCommand_1 = require("./commands/GetBlueprintRunCommand");
const GetBlueprintRunsCommand_1 = require("./commands/GetBlueprintRunsCommand");
const GetCatalogImportStatusCommand_1 = require("./commands/GetCatalogImportStatusCommand");
const GetClassifierCommand_1 = require("./commands/GetClassifierCommand");
const GetClassifiersCommand_1 = require("./commands/GetClassifiersCommand");
const GetColumnStatisticsForPartitionCommand_1 = require("./commands/GetColumnStatisticsForPartitionCommand");
const GetColumnStatisticsForTableCommand_1 = require("./commands/GetColumnStatisticsForTableCommand");
const GetConnectionCommand_1 = require("./commands/GetConnectionCommand");
const GetConnectionsCommand_1 = require("./commands/GetConnectionsCommand");
const GetCrawlerCommand_1 = require("./commands/GetCrawlerCommand");
const GetCrawlerMetricsCommand_1 = require("./commands/GetCrawlerMetricsCommand");
const GetCrawlersCommand_1 = require("./commands/GetCrawlersCommand");
const GetCustomEntityTypeCommand_1 = require("./commands/GetCustomEntityTypeCommand");
const GetDatabaseCommand_1 = require("./commands/GetDatabaseCommand");
const GetDatabasesCommand_1 = require("./commands/GetDatabasesCommand");
const GetDataCatalogEncryptionSettingsCommand_1 = require("./commands/GetDataCatalogEncryptionSettingsCommand");
const GetDataflowGraphCommand_1 = require("./commands/GetDataflowGraphCommand");
const GetDataQualityResultCommand_1 = require("./commands/GetDataQualityResultCommand");
const GetDataQualityRuleRecommendationRunCommand_1 = require("./commands/GetDataQualityRuleRecommendationRunCommand");
const GetDataQualityRulesetCommand_1 = require("./commands/GetDataQualityRulesetCommand");
const GetDataQualityRulesetEvaluationRunCommand_1 = require("./commands/GetDataQualityRulesetEvaluationRunCommand");
const GetDevEndpointCommand_1 = require("./commands/GetDevEndpointCommand");
const GetDevEndpointsCommand_1 = require("./commands/GetDevEndpointsCommand");
const GetJobBookmarkCommand_1 = require("./commands/GetJobBookmarkCommand");
const GetJobCommand_1 = require("./commands/GetJobCommand");
const GetJobRunCommand_1 = require("./commands/GetJobRunCommand");
const GetJobRunsCommand_1 = require("./commands/GetJobRunsCommand");
const GetJobsCommand_1 = require("./commands/GetJobsCommand");
const GetMappingCommand_1 = require("./commands/GetMappingCommand");
const GetMLTaskRunCommand_1 = require("./commands/GetMLTaskRunCommand");
const GetMLTaskRunsCommand_1 = require("./commands/GetMLTaskRunsCommand");
const GetMLTransformCommand_1 = require("./commands/GetMLTransformCommand");
const GetMLTransformsCommand_1 = require("./commands/GetMLTransformsCommand");
const GetPartitionCommand_1 = require("./commands/GetPartitionCommand");
const GetPartitionIndexesCommand_1 = require("./commands/GetPartitionIndexesCommand");
const GetPartitionsCommand_1 = require("./commands/GetPartitionsCommand");
const GetPlanCommand_1 = require("./commands/GetPlanCommand");
const GetRegistryCommand_1 = require("./commands/GetRegistryCommand");
const GetResourcePoliciesCommand_1 = require("./commands/GetResourcePoliciesCommand");
const GetResourcePolicyCommand_1 = require("./commands/GetResourcePolicyCommand");
const GetSchemaByDefinitionCommand_1 = require("./commands/GetSchemaByDefinitionCommand");
const GetSchemaCommand_1 = require("./commands/GetSchemaCommand");
const GetSchemaVersionCommand_1 = require("./commands/GetSchemaVersionCommand");
const GetSchemaVersionsDiffCommand_1 = require("./commands/GetSchemaVersionsDiffCommand");
const GetSecurityConfigurationCommand_1 = require("./commands/GetSecurityConfigurationCommand");
const GetSecurityConfigurationsCommand_1 = require("./commands/GetSecurityConfigurationsCommand");
const GetSessionCommand_1 = require("./commands/GetSessionCommand");
const GetStatementCommand_1 = require("./commands/GetStatementCommand");
const GetTableCommand_1 = require("./commands/GetTableCommand");
const GetTablesCommand_1 = require("./commands/GetTablesCommand");
const GetTableVersionCommand_1 = require("./commands/GetTableVersionCommand");
const GetTableVersionsCommand_1 = require("./commands/GetTableVersionsCommand");
const GetTagsCommand_1 = require("./commands/GetTagsCommand");
const GetTriggerCommand_1 = require("./commands/GetTriggerCommand");
const GetTriggersCommand_1 = require("./commands/GetTriggersCommand");
const GetUnfilteredPartitionMetadataCommand_1 = require("./commands/GetUnfilteredPartitionMetadataCommand");
const GetUnfilteredPartitionsMetadataCommand_1 = require("./commands/GetUnfilteredPartitionsMetadataCommand");
const GetUnfilteredTableMetadataCommand_1 = require("./commands/GetUnfilteredTableMetadataCommand");
const GetUserDefinedFunctionCommand_1 = require("./commands/GetUserDefinedFunctionCommand");
const GetUserDefinedFunctionsCommand_1 = require("./commands/GetUserDefinedFunctionsCommand");
const GetWorkflowCommand_1 = require("./commands/GetWorkflowCommand");
const GetWorkflowRunCommand_1 = require("./commands/GetWorkflowRunCommand");
const GetWorkflowRunPropertiesCommand_1 = require("./commands/GetWorkflowRunPropertiesCommand");
const GetWorkflowRunsCommand_1 = require("./commands/GetWorkflowRunsCommand");
const ImportCatalogToGlueCommand_1 = require("./commands/ImportCatalogToGlueCommand");
const ListBlueprintsCommand_1 = require("./commands/ListBlueprintsCommand");
const ListCrawlersCommand_1 = require("./commands/ListCrawlersCommand");
const ListCrawlsCommand_1 = require("./commands/ListCrawlsCommand");
const ListCustomEntityTypesCommand_1 = require("./commands/ListCustomEntityTypesCommand");
const ListDataQualityResultsCommand_1 = require("./commands/ListDataQualityResultsCommand");
const ListDataQualityRuleRecommendationRunsCommand_1 = require("./commands/ListDataQualityRuleRecommendationRunsCommand");
const ListDataQualityRulesetEvaluationRunsCommand_1 = require("./commands/ListDataQualityRulesetEvaluationRunsCommand");
const ListDataQualityRulesetsCommand_1 = require("./commands/ListDataQualityRulesetsCommand");
const ListDevEndpointsCommand_1 = require("./commands/ListDevEndpointsCommand");
const ListJobsCommand_1 = require("./commands/ListJobsCommand");
const ListMLTransformsCommand_1 = require("./commands/ListMLTransformsCommand");
const ListRegistriesCommand_1 = require("./commands/ListRegistriesCommand");
const ListSchemasCommand_1 = require("./commands/ListSchemasCommand");
const ListSchemaVersionsCommand_1 = require("./commands/ListSchemaVersionsCommand");
const ListSessionsCommand_1 = require("./commands/ListSessionsCommand");
const ListStatementsCommand_1 = require("./commands/ListStatementsCommand");
const ListTriggersCommand_1 = require("./commands/ListTriggersCommand");
const ListWorkflowsCommand_1 = require("./commands/ListWorkflowsCommand");
const PutDataCatalogEncryptionSettingsCommand_1 = require("./commands/PutDataCatalogEncryptionSettingsCommand");
const PutResourcePolicyCommand_1 = require("./commands/PutResourcePolicyCommand");
const PutSchemaVersionMetadataCommand_1 = require("./commands/PutSchemaVersionMetadataCommand");
const PutWorkflowRunPropertiesCommand_1 = require("./commands/PutWorkflowRunPropertiesCommand");
const QuerySchemaVersionMetadataCommand_1 = require("./commands/QuerySchemaVersionMetadataCommand");
const RegisterSchemaVersionCommand_1 = require("./commands/RegisterSchemaVersionCommand");
const RemoveSchemaVersionMetadataCommand_1 = require("./commands/RemoveSchemaVersionMetadataCommand");
const ResetJobBookmarkCommand_1 = require("./commands/ResetJobBookmarkCommand");
const ResumeWorkflowRunCommand_1 = require("./commands/ResumeWorkflowRunCommand");
const RunStatementCommand_1 = require("./commands/RunStatementCommand");
const SearchTablesCommand_1 = require("./commands/SearchTablesCommand");
const StartBlueprintRunCommand_1 = require("./commands/StartBlueprintRunCommand");
const StartCrawlerCommand_1 = require("./commands/StartCrawlerCommand");
const StartCrawlerScheduleCommand_1 = require("./commands/StartCrawlerScheduleCommand");
const StartDataQualityRuleRecommendationRunCommand_1 = require("./commands/StartDataQualityRuleRecommendationRunCommand");
const StartDataQualityRulesetEvaluationRunCommand_1 = require("./commands/StartDataQualityRulesetEvaluationRunCommand");
const StartExportLabelsTaskRunCommand_1 = require("./commands/StartExportLabelsTaskRunCommand");
const StartImportLabelsTaskRunCommand_1 = require("./commands/StartImportLabelsTaskRunCommand");
const StartJobRunCommand_1 = require("./commands/StartJobRunCommand");
const StartMLEvaluationTaskRunCommand_1 = require("./commands/StartMLEvaluationTaskRunCommand");
const StartMLLabelingSetGenerationTaskRunCommand_1 = require("./commands/StartMLLabelingSetGenerationTaskRunCommand");
const StartTriggerCommand_1 = require("./commands/StartTriggerCommand");
const StartWorkflowRunCommand_1 = require("./commands/StartWorkflowRunCommand");
const StopCrawlerCommand_1 = require("./commands/StopCrawlerCommand");
const StopCrawlerScheduleCommand_1 = require("./commands/StopCrawlerScheduleCommand");
const StopSessionCommand_1 = require("./commands/StopSessionCommand");
const StopTriggerCommand_1 = require("./commands/StopTriggerCommand");
const StopWorkflowRunCommand_1 = require("./commands/StopWorkflowRunCommand");
const TagResourceCommand_1 = require("./commands/TagResourceCommand");
const UntagResourceCommand_1 = require("./commands/UntagResourceCommand");
const UpdateBlueprintCommand_1 = require("./commands/UpdateBlueprintCommand");
const UpdateClassifierCommand_1 = require("./commands/UpdateClassifierCommand");
const UpdateColumnStatisticsForPartitionCommand_1 = require("./commands/UpdateColumnStatisticsForPartitionCommand");
const UpdateColumnStatisticsForTableCommand_1 = require("./commands/UpdateColumnStatisticsForTableCommand");
const UpdateConnectionCommand_1 = require("./commands/UpdateConnectionCommand");
const UpdateCrawlerCommand_1 = require("./commands/UpdateCrawlerCommand");
const UpdateCrawlerScheduleCommand_1 = require("./commands/UpdateCrawlerScheduleCommand");
const UpdateDatabaseCommand_1 = require("./commands/UpdateDatabaseCommand");
const UpdateDataQualityRulesetCommand_1 = require("./commands/UpdateDataQualityRulesetCommand");
const UpdateDevEndpointCommand_1 = require("./commands/UpdateDevEndpointCommand");
const UpdateJobCommand_1 = require("./commands/UpdateJobCommand");
const UpdateJobFromSourceControlCommand_1 = require("./commands/UpdateJobFromSourceControlCommand");
const UpdateMLTransformCommand_1 = require("./commands/UpdateMLTransformCommand");
const UpdatePartitionCommand_1 = require("./commands/UpdatePartitionCommand");
const UpdateRegistryCommand_1 = require("./commands/UpdateRegistryCommand");
const UpdateSchemaCommand_1 = require("./commands/UpdateSchemaCommand");
const UpdateSourceControlFromJobCommand_1 = require("./commands/UpdateSourceControlFromJobCommand");
const UpdateTableCommand_1 = require("./commands/UpdateTableCommand");
const UpdateTriggerCommand_1 = require("./commands/UpdateTriggerCommand");
const UpdateUserDefinedFunctionCommand_1 = require("./commands/UpdateUserDefinedFunctionCommand");
const UpdateWorkflowCommand_1 = require("./commands/UpdateWorkflowCommand");
const GlueClient_1 = require("./GlueClient");
class Glue extends GlueClient_1.GlueClient {
    batchCreatePartition(args, optionsOrCb, cb) {
        const command = new BatchCreatePartitionCommand_1.BatchCreatePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchDeleteConnection(args, optionsOrCb, cb) {
        const command = new BatchDeleteConnectionCommand_1.BatchDeleteConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchDeletePartition(args, optionsOrCb, cb) {
        const command = new BatchDeletePartitionCommand_1.BatchDeletePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchDeleteTable(args, optionsOrCb, cb) {
        const command = new BatchDeleteTableCommand_1.BatchDeleteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchDeleteTableVersion(args, optionsOrCb, cb) {
        const command = new BatchDeleteTableVersionCommand_1.BatchDeleteTableVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetBlueprints(args, optionsOrCb, cb) {
        const command = new BatchGetBlueprintsCommand_1.BatchGetBlueprintsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetCrawlers(args, optionsOrCb, cb) {
        const command = new BatchGetCrawlersCommand_1.BatchGetCrawlersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetCustomEntityTypes(args, optionsOrCb, cb) {
        const command = new BatchGetCustomEntityTypesCommand_1.BatchGetCustomEntityTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetDataQualityResult(args, optionsOrCb, cb) {
        const command = new BatchGetDataQualityResultCommand_1.BatchGetDataQualityResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetDevEndpoints(args, optionsOrCb, cb) {
        const command = new BatchGetDevEndpointsCommand_1.BatchGetDevEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetJobs(args, optionsOrCb, cb) {
        const command = new BatchGetJobsCommand_1.BatchGetJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetPartition(args, optionsOrCb, cb) {
        const command = new BatchGetPartitionCommand_1.BatchGetPartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetTriggers(args, optionsOrCb, cb) {
        const command = new BatchGetTriggersCommand_1.BatchGetTriggersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchGetWorkflows(args, optionsOrCb, cb) {
        const command = new BatchGetWorkflowsCommand_1.BatchGetWorkflowsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchStopJobRun(args, optionsOrCb, cb) {
        const command = new BatchStopJobRunCommand_1.BatchStopJobRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    batchUpdatePartition(args, optionsOrCb, cb) {
        const command = new BatchUpdatePartitionCommand_1.BatchUpdatePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelDataQualityRuleRecommendationRun(args, optionsOrCb, cb) {
        const command = new CancelDataQualityRuleRecommendationRunCommand_1.CancelDataQualityRuleRecommendationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelDataQualityRulesetEvaluationRun(args, optionsOrCb, cb) {
        const command = new CancelDataQualityRulesetEvaluationRunCommand_1.CancelDataQualityRulesetEvaluationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelMLTaskRun(args, optionsOrCb, cb) {
        const command = new CancelMLTaskRunCommand_1.CancelMLTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelStatement(args, optionsOrCb, cb) {
        const command = new CancelStatementCommand_1.CancelStatementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    checkSchemaVersionValidity(args, optionsOrCb, cb) {
        const command = new CheckSchemaVersionValidityCommand_1.CheckSchemaVersionValidityCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createBlueprint(args, optionsOrCb, cb) {
        const command = new CreateBlueprintCommand_1.CreateBlueprintCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createClassifier(args, optionsOrCb, cb) {
        const command = new CreateClassifierCommand_1.CreateClassifierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createConnection(args, optionsOrCb, cb) {
        const command = new CreateConnectionCommand_1.CreateConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCrawler(args, optionsOrCb, cb) {
        const command = new CreateCrawlerCommand_1.CreateCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createCustomEntityType(args, optionsOrCb, cb) {
        const command = new CreateCustomEntityTypeCommand_1.CreateCustomEntityTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDatabase(args, optionsOrCb, cb) {
        const command = new CreateDatabaseCommand_1.CreateDatabaseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDataQualityRuleset(args, optionsOrCb, cb) {
        const command = new CreateDataQualityRulesetCommand_1.CreateDataQualityRulesetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDevEndpoint(args, optionsOrCb, cb) {
        const command = new CreateDevEndpointCommand_1.CreateDevEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createJob(args, optionsOrCb, cb) {
        const command = new CreateJobCommand_1.CreateJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createMLTransform(args, optionsOrCb, cb) {
        const command = new CreateMLTransformCommand_1.CreateMLTransformCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPartition(args, optionsOrCb, cb) {
        const command = new CreatePartitionCommand_1.CreatePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPartitionIndex(args, optionsOrCb, cb) {
        const command = new CreatePartitionIndexCommand_1.CreatePartitionIndexCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createRegistry(args, optionsOrCb, cb) {
        const command = new CreateRegistryCommand_1.CreateRegistryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSchema(args, optionsOrCb, cb) {
        const command = new CreateSchemaCommand_1.CreateSchemaCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createScript(args, optionsOrCb, cb) {
        const command = new CreateScriptCommand_1.CreateScriptCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSecurityConfiguration(args, optionsOrCb, cb) {
        const command = new CreateSecurityConfigurationCommand_1.CreateSecurityConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createSession(args, optionsOrCb, cb) {
        const command = new CreateSessionCommand_1.CreateSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTable(args, optionsOrCb, cb) {
        const command = new CreateTableCommand_1.CreateTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createTrigger(args, optionsOrCb, cb) {
        const command = new CreateTriggerCommand_1.CreateTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createUserDefinedFunction(args, optionsOrCb, cb) {
        const command = new CreateUserDefinedFunctionCommand_1.CreateUserDefinedFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createWorkflow(args, optionsOrCb, cb) {
        const command = new CreateWorkflowCommand_1.CreateWorkflowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteBlueprint(args, optionsOrCb, cb) {
        const command = new DeleteBlueprintCommand_1.DeleteBlueprintCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteClassifier(args, optionsOrCb, cb) {
        const command = new DeleteClassifierCommand_1.DeleteClassifierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteColumnStatisticsForPartition(args, optionsOrCb, cb) {
        const command = new DeleteColumnStatisticsForPartitionCommand_1.DeleteColumnStatisticsForPartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteColumnStatisticsForTable(args, optionsOrCb, cb) {
        const command = new DeleteColumnStatisticsForTableCommand_1.DeleteColumnStatisticsForTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteConnection(args, optionsOrCb, cb) {
        const command = new DeleteConnectionCommand_1.DeleteConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCrawler(args, optionsOrCb, cb) {
        const command = new DeleteCrawlerCommand_1.DeleteCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteCustomEntityType(args, optionsOrCb, cb) {
        const command = new DeleteCustomEntityTypeCommand_1.DeleteCustomEntityTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDatabase(args, optionsOrCb, cb) {
        const command = new DeleteDatabaseCommand_1.DeleteDatabaseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDataQualityRuleset(args, optionsOrCb, cb) {
        const command = new DeleteDataQualityRulesetCommand_1.DeleteDataQualityRulesetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDevEndpoint(args, optionsOrCb, cb) {
        const command = new DeleteDevEndpointCommand_1.DeleteDevEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteJob(args, optionsOrCb, cb) {
        const command = new DeleteJobCommand_1.DeleteJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteMLTransform(args, optionsOrCb, cb) {
        const command = new DeleteMLTransformCommand_1.DeleteMLTransformCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePartition(args, optionsOrCb, cb) {
        const command = new DeletePartitionCommand_1.DeletePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePartitionIndex(args, optionsOrCb, cb) {
        const command = new DeletePartitionIndexCommand_1.DeletePartitionIndexCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteRegistry(args, optionsOrCb, cb) {
        const command = new DeleteRegistryCommand_1.DeleteRegistryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteResourcePolicy(args, optionsOrCb, cb) {
        const command = new DeleteResourcePolicyCommand_1.DeleteResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSchema(args, optionsOrCb, cb) {
        const command = new DeleteSchemaCommand_1.DeleteSchemaCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSchemaVersions(args, optionsOrCb, cb) {
        const command = new DeleteSchemaVersionsCommand_1.DeleteSchemaVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSecurityConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteSecurityConfigurationCommand_1.DeleteSecurityConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteSession(args, optionsOrCb, cb) {
        const command = new DeleteSessionCommand_1.DeleteSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTable(args, optionsOrCb, cb) {
        const command = new DeleteTableCommand_1.DeleteTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTableVersion(args, optionsOrCb, cb) {
        const command = new DeleteTableVersionCommand_1.DeleteTableVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteTrigger(args, optionsOrCb, cb) {
        const command = new DeleteTriggerCommand_1.DeleteTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteUserDefinedFunction(args, optionsOrCb, cb) {
        const command = new DeleteUserDefinedFunctionCommand_1.DeleteUserDefinedFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteWorkflow(args, optionsOrCb, cb) {
        const command = new DeleteWorkflowCommand_1.DeleteWorkflowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBlueprint(args, optionsOrCb, cb) {
        const command = new GetBlueprintCommand_1.GetBlueprintCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBlueprintRun(args, optionsOrCb, cb) {
        const command = new GetBlueprintRunCommand_1.GetBlueprintRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getBlueprintRuns(args, optionsOrCb, cb) {
        const command = new GetBlueprintRunsCommand_1.GetBlueprintRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCatalogImportStatus(args, optionsOrCb, cb) {
        const command = new GetCatalogImportStatusCommand_1.GetCatalogImportStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getClassifier(args, optionsOrCb, cb) {
        const command = new GetClassifierCommand_1.GetClassifierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getClassifiers(args, optionsOrCb, cb) {
        const command = new GetClassifiersCommand_1.GetClassifiersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getColumnStatisticsForPartition(args, optionsOrCb, cb) {
        const command = new GetColumnStatisticsForPartitionCommand_1.GetColumnStatisticsForPartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getColumnStatisticsForTable(args, optionsOrCb, cb) {
        const command = new GetColumnStatisticsForTableCommand_1.GetColumnStatisticsForTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConnection(args, optionsOrCb, cb) {
        const command = new GetConnectionCommand_1.GetConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getConnections(args, optionsOrCb, cb) {
        const command = new GetConnectionsCommand_1.GetConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCrawler(args, optionsOrCb, cb) {
        const command = new GetCrawlerCommand_1.GetCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCrawlerMetrics(args, optionsOrCb, cb) {
        const command = new GetCrawlerMetricsCommand_1.GetCrawlerMetricsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCrawlers(args, optionsOrCb, cb) {
        const command = new GetCrawlersCommand_1.GetCrawlersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCustomEntityType(args, optionsOrCb, cb) {
        const command = new GetCustomEntityTypeCommand_1.GetCustomEntityTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDatabase(args, optionsOrCb, cb) {
        const command = new GetDatabaseCommand_1.GetDatabaseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDatabases(args, optionsOrCb, cb) {
        const command = new GetDatabasesCommand_1.GetDatabasesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataCatalogEncryptionSettings(args, optionsOrCb, cb) {
        const command = new GetDataCatalogEncryptionSettingsCommand_1.GetDataCatalogEncryptionSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataflowGraph(args, optionsOrCb, cb) {
        const command = new GetDataflowGraphCommand_1.GetDataflowGraphCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataQualityResult(args, optionsOrCb, cb) {
        const command = new GetDataQualityResultCommand_1.GetDataQualityResultCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataQualityRuleRecommendationRun(args, optionsOrCb, cb) {
        const command = new GetDataQualityRuleRecommendationRunCommand_1.GetDataQualityRuleRecommendationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataQualityRuleset(args, optionsOrCb, cb) {
        const command = new GetDataQualityRulesetCommand_1.GetDataQualityRulesetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDataQualityRulesetEvaluationRun(args, optionsOrCb, cb) {
        const command = new GetDataQualityRulesetEvaluationRunCommand_1.GetDataQualityRulesetEvaluationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDevEndpoint(args, optionsOrCb, cb) {
        const command = new GetDevEndpointCommand_1.GetDevEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getDevEndpoints(args, optionsOrCb, cb) {
        const command = new GetDevEndpointsCommand_1.GetDevEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJob(args, optionsOrCb, cb) {
        const command = new GetJobCommand_1.GetJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJobBookmark(args, optionsOrCb, cb) {
        const command = new GetJobBookmarkCommand_1.GetJobBookmarkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJobRun(args, optionsOrCb, cb) {
        const command = new GetJobRunCommand_1.GetJobRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJobRuns(args, optionsOrCb, cb) {
        const command = new GetJobRunsCommand_1.GetJobRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getJobs(args, optionsOrCb, cb) {
        const command = new GetJobsCommand_1.GetJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getMapping(args, optionsOrCb, cb) {
        const command = new GetMappingCommand_1.GetMappingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getMLTaskRun(args, optionsOrCb, cb) {
        const command = new GetMLTaskRunCommand_1.GetMLTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getMLTaskRuns(args, optionsOrCb, cb) {
        const command = new GetMLTaskRunsCommand_1.GetMLTaskRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getMLTransform(args, optionsOrCb, cb) {
        const command = new GetMLTransformCommand_1.GetMLTransformCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getMLTransforms(args, optionsOrCb, cb) {
        const command = new GetMLTransformsCommand_1.GetMLTransformsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPartition(args, optionsOrCb, cb) {
        const command = new GetPartitionCommand_1.GetPartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPartitionIndexes(args, optionsOrCb, cb) {
        const command = new GetPartitionIndexesCommand_1.GetPartitionIndexesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPartitions(args, optionsOrCb, cb) {
        const command = new GetPartitionsCommand_1.GetPartitionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPlan(args, optionsOrCb, cb) {
        const command = new GetPlanCommand_1.GetPlanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getRegistry(args, optionsOrCb, cb) {
        const command = new GetRegistryCommand_1.GetRegistryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getResourcePolicies(args, optionsOrCb, cb) {
        const command = new GetResourcePoliciesCommand_1.GetResourcePoliciesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getResourcePolicy(args, optionsOrCb, cb) {
        const command = new GetResourcePolicyCommand_1.GetResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSchema(args, optionsOrCb, cb) {
        const command = new GetSchemaCommand_1.GetSchemaCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSchemaByDefinition(args, optionsOrCb, cb) {
        const command = new GetSchemaByDefinitionCommand_1.GetSchemaByDefinitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSchemaVersion(args, optionsOrCb, cb) {
        const command = new GetSchemaVersionCommand_1.GetSchemaVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSchemaVersionsDiff(args, optionsOrCb, cb) {
        const command = new GetSchemaVersionsDiffCommand_1.GetSchemaVersionsDiffCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSecurityConfiguration(args, optionsOrCb, cb) {
        const command = new GetSecurityConfigurationCommand_1.GetSecurityConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSecurityConfigurations(args, optionsOrCb, cb) {
        const command = new GetSecurityConfigurationsCommand_1.GetSecurityConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getSession(args, optionsOrCb, cb) {
        const command = new GetSessionCommand_1.GetSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getStatement(args, optionsOrCb, cb) {
        const command = new GetStatementCommand_1.GetStatementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTable(args, optionsOrCb, cb) {
        const command = new GetTableCommand_1.GetTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTables(args, optionsOrCb, cb) {
        const command = new GetTablesCommand_1.GetTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTableVersion(args, optionsOrCb, cb) {
        const command = new GetTableVersionCommand_1.GetTableVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTableVersions(args, optionsOrCb, cb) {
        const command = new GetTableVersionsCommand_1.GetTableVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTags(args, optionsOrCb, cb) {
        const command = new GetTagsCommand_1.GetTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTrigger(args, optionsOrCb, cb) {
        const command = new GetTriggerCommand_1.GetTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getTriggers(args, optionsOrCb, cb) {
        const command = new GetTriggersCommand_1.GetTriggersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUnfilteredPartitionMetadata(args, optionsOrCb, cb) {
        const command = new GetUnfilteredPartitionMetadataCommand_1.GetUnfilteredPartitionMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUnfilteredPartitionsMetadata(args, optionsOrCb, cb) {
        const command = new GetUnfilteredPartitionsMetadataCommand_1.GetUnfilteredPartitionsMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUnfilteredTableMetadata(args, optionsOrCb, cb) {
        const command = new GetUnfilteredTableMetadataCommand_1.GetUnfilteredTableMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUserDefinedFunction(args, optionsOrCb, cb) {
        const command = new GetUserDefinedFunctionCommand_1.GetUserDefinedFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUserDefinedFunctions(args, optionsOrCb, cb) {
        const command = new GetUserDefinedFunctionsCommand_1.GetUserDefinedFunctionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getWorkflow(args, optionsOrCb, cb) {
        const command = new GetWorkflowCommand_1.GetWorkflowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getWorkflowRun(args, optionsOrCb, cb) {
        const command = new GetWorkflowRunCommand_1.GetWorkflowRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getWorkflowRunProperties(args, optionsOrCb, cb) {
        const command = new GetWorkflowRunPropertiesCommand_1.GetWorkflowRunPropertiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getWorkflowRuns(args, optionsOrCb, cb) {
        const command = new GetWorkflowRunsCommand_1.GetWorkflowRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    importCatalogToGlue(args, optionsOrCb, cb) {
        const command = new ImportCatalogToGlueCommand_1.ImportCatalogToGlueCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listBlueprints(args, optionsOrCb, cb) {
        const command = new ListBlueprintsCommand_1.ListBlueprintsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listCrawlers(args, optionsOrCb, cb) {
        const command = new ListCrawlersCommand_1.ListCrawlersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listCrawls(args, optionsOrCb, cb) {
        const command = new ListCrawlsCommand_1.ListCrawlsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listCustomEntityTypes(args, optionsOrCb, cb) {
        const command = new ListCustomEntityTypesCommand_1.ListCustomEntityTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDataQualityResults(args, optionsOrCb, cb) {
        const command = new ListDataQualityResultsCommand_1.ListDataQualityResultsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDataQualityRuleRecommendationRuns(args, optionsOrCb, cb) {
        const command = new ListDataQualityRuleRecommendationRunsCommand_1.ListDataQualityRuleRecommendationRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDataQualityRulesetEvaluationRuns(args, optionsOrCb, cb) {
        const command = new ListDataQualityRulesetEvaluationRunsCommand_1.ListDataQualityRulesetEvaluationRunsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDataQualityRulesets(args, optionsOrCb, cb) {
        const command = new ListDataQualityRulesetsCommand_1.ListDataQualityRulesetsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDevEndpoints(args, optionsOrCb, cb) {
        const command = new ListDevEndpointsCommand_1.ListDevEndpointsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listJobs(args, optionsOrCb, cb) {
        const command = new ListJobsCommand_1.ListJobsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listMLTransforms(args, optionsOrCb, cb) {
        const command = new ListMLTransformsCommand_1.ListMLTransformsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listRegistries(args, optionsOrCb, cb) {
        const command = new ListRegistriesCommand_1.ListRegistriesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listSchemas(args, optionsOrCb, cb) {
        const command = new ListSchemasCommand_1.ListSchemasCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listSchemaVersions(args, optionsOrCb, cb) {
        const command = new ListSchemaVersionsCommand_1.ListSchemaVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listSessions(args, optionsOrCb, cb) {
        const command = new ListSessionsCommand_1.ListSessionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listStatements(args, optionsOrCb, cb) {
        const command = new ListStatementsCommand_1.ListStatementsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTriggers(args, optionsOrCb, cb) {
        const command = new ListTriggersCommand_1.ListTriggersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listWorkflows(args, optionsOrCb, cb) {
        const command = new ListWorkflowsCommand_1.ListWorkflowsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putDataCatalogEncryptionSettings(args, optionsOrCb, cb) {
        const command = new PutDataCatalogEncryptionSettingsCommand_1.PutDataCatalogEncryptionSettingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putResourcePolicy(args, optionsOrCb, cb) {
        const command = new PutResourcePolicyCommand_1.PutResourcePolicyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putSchemaVersionMetadata(args, optionsOrCb, cb) {
        const command = new PutSchemaVersionMetadataCommand_1.PutSchemaVersionMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    putWorkflowRunProperties(args, optionsOrCb, cb) {
        const command = new PutWorkflowRunPropertiesCommand_1.PutWorkflowRunPropertiesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    querySchemaVersionMetadata(args, optionsOrCb, cb) {
        const command = new QuerySchemaVersionMetadataCommand_1.QuerySchemaVersionMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    registerSchemaVersion(args, optionsOrCb, cb) {
        const command = new RegisterSchemaVersionCommand_1.RegisterSchemaVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    removeSchemaVersionMetadata(args, optionsOrCb, cb) {
        const command = new RemoveSchemaVersionMetadataCommand_1.RemoveSchemaVersionMetadataCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resetJobBookmark(args, optionsOrCb, cb) {
        const command = new ResetJobBookmarkCommand_1.ResetJobBookmarkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    resumeWorkflowRun(args, optionsOrCb, cb) {
        const command = new ResumeWorkflowRunCommand_1.ResumeWorkflowRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    runStatement(args, optionsOrCb, cb) {
        const command = new RunStatementCommand_1.RunStatementCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    searchTables(args, optionsOrCb, cb) {
        const command = new SearchTablesCommand_1.SearchTablesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startBlueprintRun(args, optionsOrCb, cb) {
        const command = new StartBlueprintRunCommand_1.StartBlueprintRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startCrawler(args, optionsOrCb, cb) {
        const command = new StartCrawlerCommand_1.StartCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startCrawlerSchedule(args, optionsOrCb, cb) {
        const command = new StartCrawlerScheduleCommand_1.StartCrawlerScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startDataQualityRuleRecommendationRun(args, optionsOrCb, cb) {
        const command = new StartDataQualityRuleRecommendationRunCommand_1.StartDataQualityRuleRecommendationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startDataQualityRulesetEvaluationRun(args, optionsOrCb, cb) {
        const command = new StartDataQualityRulesetEvaluationRunCommand_1.StartDataQualityRulesetEvaluationRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startExportLabelsTaskRun(args, optionsOrCb, cb) {
        const command = new StartExportLabelsTaskRunCommand_1.StartExportLabelsTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startImportLabelsTaskRun(args, optionsOrCb, cb) {
        const command = new StartImportLabelsTaskRunCommand_1.StartImportLabelsTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startJobRun(args, optionsOrCb, cb) {
        const command = new StartJobRunCommand_1.StartJobRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startMLEvaluationTaskRun(args, optionsOrCb, cb) {
        const command = new StartMLEvaluationTaskRunCommand_1.StartMLEvaluationTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startMLLabelingSetGenerationTaskRun(args, optionsOrCb, cb) {
        const command = new StartMLLabelingSetGenerationTaskRunCommand_1.StartMLLabelingSetGenerationTaskRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startTrigger(args, optionsOrCb, cb) {
        const command = new StartTriggerCommand_1.StartTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startWorkflowRun(args, optionsOrCb, cb) {
        const command = new StartWorkflowRunCommand_1.StartWorkflowRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopCrawler(args, optionsOrCb, cb) {
        const command = new StopCrawlerCommand_1.StopCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopCrawlerSchedule(args, optionsOrCb, cb) {
        const command = new StopCrawlerScheduleCommand_1.StopCrawlerScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopSession(args, optionsOrCb, cb) {
        const command = new StopSessionCommand_1.StopSessionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopTrigger(args, optionsOrCb, cb) {
        const command = new StopTriggerCommand_1.StopTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    stopWorkflowRun(args, optionsOrCb, cb) {
        const command = new StopWorkflowRunCommand_1.StopWorkflowRunCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateBlueprint(args, optionsOrCb, cb) {
        const command = new UpdateBlueprintCommand_1.UpdateBlueprintCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateClassifier(args, optionsOrCb, cb) {
        const command = new UpdateClassifierCommand_1.UpdateClassifierCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateColumnStatisticsForPartition(args, optionsOrCb, cb) {
        const command = new UpdateColumnStatisticsForPartitionCommand_1.UpdateColumnStatisticsForPartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateColumnStatisticsForTable(args, optionsOrCb, cb) {
        const command = new UpdateColumnStatisticsForTableCommand_1.UpdateColumnStatisticsForTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateConnection(args, optionsOrCb, cb) {
        const command = new UpdateConnectionCommand_1.UpdateConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateCrawler(args, optionsOrCb, cb) {
        const command = new UpdateCrawlerCommand_1.UpdateCrawlerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateCrawlerSchedule(args, optionsOrCb, cb) {
        const command = new UpdateCrawlerScheduleCommand_1.UpdateCrawlerScheduleCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateDatabase(args, optionsOrCb, cb) {
        const command = new UpdateDatabaseCommand_1.UpdateDatabaseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateDataQualityRuleset(args, optionsOrCb, cb) {
        const command = new UpdateDataQualityRulesetCommand_1.UpdateDataQualityRulesetCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateDevEndpoint(args, optionsOrCb, cb) {
        const command = new UpdateDevEndpointCommand_1.UpdateDevEndpointCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateJob(args, optionsOrCb, cb) {
        const command = new UpdateJobCommand_1.UpdateJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateJobFromSourceControl(args, optionsOrCb, cb) {
        const command = new UpdateJobFromSourceControlCommand_1.UpdateJobFromSourceControlCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateMLTransform(args, optionsOrCb, cb) {
        const command = new UpdateMLTransformCommand_1.UpdateMLTransformCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updatePartition(args, optionsOrCb, cb) {
        const command = new UpdatePartitionCommand_1.UpdatePartitionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateRegistry(args, optionsOrCb, cb) {
        const command = new UpdateRegistryCommand_1.UpdateRegistryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateSchema(args, optionsOrCb, cb) {
        const command = new UpdateSchemaCommand_1.UpdateSchemaCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateSourceControlFromJob(args, optionsOrCb, cb) {
        const command = new UpdateSourceControlFromJobCommand_1.UpdateSourceControlFromJobCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateTable(args, optionsOrCb, cb) {
        const command = new UpdateTableCommand_1.UpdateTableCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateTrigger(args, optionsOrCb, cb) {
        const command = new UpdateTriggerCommand_1.UpdateTriggerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateUserDefinedFunction(args, optionsOrCb, cb) {
        const command = new UpdateUserDefinedFunctionCommand_1.UpdateUserDefinedFunctionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateWorkflow(args, optionsOrCb, cb) {
        const command = new UpdateWorkflowCommand_1.UpdateWorkflowCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
exports.Glue = Glue;
