import { GlueServiceException as __BaseException } from "./GlueServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export var AggFunction;
(function (AggFunction) {
    AggFunction["avg"] = "avg";
    AggFunction["count"] = "count";
    AggFunction["countDistinct"] = "countDistinct";
    AggFunction["first"] = "first";
    AggFunction["kurtosis"] = "kurtosis";
    AggFunction["last"] = "last";
    AggFunction["max"] = "max";
    AggFunction["min"] = "min";
    AggFunction["skewness"] = "skewness";
    AggFunction["stddev_pop"] = "stddev_pop";
    AggFunction["stddev_samp"] = "stddev_samp";
    AggFunction["sum"] = "sum";
    AggFunction["sumDistinct"] = "sumDistinct";
    AggFunction["var_pop"] = "var_pop";
    AggFunction["var_samp"] = "var_samp";
})(AggFunction || (AggFunction = {}));
export class AlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class EntityNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EntityNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EntityNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EntityNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class GlueEncryptionException extends __BaseException {
    constructor(opts) {
        super({
            name: "GlueEncryptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlueEncryptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlueEncryptionException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.Message = opts.Message;
    }
}
export class OperationTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationTimeoutException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNumberLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNumberLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNumberLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNumberLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotReadyException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
export var BlueprintStatus;
(function (BlueprintStatus) {
    BlueprintStatus["ACTIVE"] = "ACTIVE";
    BlueprintStatus["CREATING"] = "CREATING";
    BlueprintStatus["FAILED"] = "FAILED";
    BlueprintStatus["UPDATING"] = "UPDATING";
})(BlueprintStatus || (BlueprintStatus = {}));
export var LastCrawlStatus;
(function (LastCrawlStatus) {
    LastCrawlStatus["CANCELLED"] = "CANCELLED";
    LastCrawlStatus["FAILED"] = "FAILED";
    LastCrawlStatus["SUCCEEDED"] = "SUCCEEDED";
})(LastCrawlStatus || (LastCrawlStatus = {}));
export var CrawlerLineageSettings;
(function (CrawlerLineageSettings) {
    CrawlerLineageSettings["DISABLE"] = "DISABLE";
    CrawlerLineageSettings["ENABLE"] = "ENABLE";
})(CrawlerLineageSettings || (CrawlerLineageSettings = {}));
export var RecrawlBehavior;
(function (RecrawlBehavior) {
    RecrawlBehavior["CRAWL_EVENT_MODE"] = "CRAWL_EVENT_MODE";
    RecrawlBehavior["CRAWL_EVERYTHING"] = "CRAWL_EVERYTHING";
    RecrawlBehavior["CRAWL_NEW_FOLDERS_ONLY"] = "CRAWL_NEW_FOLDERS_ONLY";
})(RecrawlBehavior || (RecrawlBehavior = {}));
export var ScheduleState;
(function (ScheduleState) {
    ScheduleState["NOT_SCHEDULED"] = "NOT_SCHEDULED";
    ScheduleState["SCHEDULED"] = "SCHEDULED";
    ScheduleState["TRANSITIONING"] = "TRANSITIONING";
})(ScheduleState || (ScheduleState = {}));
export var DeleteBehavior;
(function (DeleteBehavior) {
    DeleteBehavior["DELETE_FROM_DATABASE"] = "DELETE_FROM_DATABASE";
    DeleteBehavior["DEPRECATE_IN_DATABASE"] = "DEPRECATE_IN_DATABASE";
    DeleteBehavior["LOG"] = "LOG";
})(DeleteBehavior || (DeleteBehavior = {}));
export var UpdateBehavior;
(function (UpdateBehavior) {
    UpdateBehavior["LOG"] = "LOG";
    UpdateBehavior["UPDATE_IN_DATABASE"] = "UPDATE_IN_DATABASE";
})(UpdateBehavior || (UpdateBehavior = {}));
export var CrawlerState;
(function (CrawlerState) {
    CrawlerState["READY"] = "READY";
    CrawlerState["RUNNING"] = "RUNNING";
    CrawlerState["STOPPING"] = "STOPPING";
})(CrawlerState || (CrawlerState = {}));
export var JdbcMetadataEntry;
(function (JdbcMetadataEntry) {
    JdbcMetadataEntry["COMMENTS"] = "COMMENTS";
    JdbcMetadataEntry["RAWTYPES"] = "RAWTYPES";
})(JdbcMetadataEntry || (JdbcMetadataEntry = {}));
export var DataQualityRuleResultStatus;
(function (DataQualityRuleResultStatus) {
    DataQualityRuleResultStatus["ERROR"] = "ERROR";
    DataQualityRuleResultStatus["FAIL"] = "FAIL";
    DataQualityRuleResultStatus["PASS"] = "PASS";
})(DataQualityRuleResultStatus || (DataQualityRuleResultStatus = {}));
export var WorkerType;
(function (WorkerType) {
    WorkerType["G_025X"] = "G.025X";
    WorkerType["G_1X"] = "G.1X";
    WorkerType["G_2X"] = "G.2X";
    WorkerType["Standard"] = "Standard";
})(WorkerType || (WorkerType = {}));
export var StartingPosition;
(function (StartingPosition) {
    StartingPosition["EARLIEST"] = "earliest";
    StartingPosition["LATEST"] = "latest";
    StartingPosition["TRIM_HORIZON"] = "trim_horizon";
})(StartingPosition || (StartingPosition = {}));
export var JDBCConnectionType;
(function (JDBCConnectionType) {
    JDBCConnectionType["mysql"] = "mysql";
    JDBCConnectionType["oracle"] = "oracle";
    JDBCConnectionType["postgresql"] = "postgresql";
    JDBCConnectionType["redshift"] = "redshift";
    JDBCConnectionType["sqlserver"] = "sqlserver";
})(JDBCConnectionType || (JDBCConnectionType = {}));
export var ParamType;
(function (ParamType) {
    ParamType["BOOL"] = "bool";
    ParamType["COMPLEX"] = "complex";
    ParamType["FLOAT"] = "float";
    ParamType["INT"] = "int";
    ParamType["LIST"] = "list";
    ParamType["NULL"] = "null";
    ParamType["STR"] = "str";
})(ParamType || (ParamType = {}));
export var DQTransformOutput;
(function (DQTransformOutput) {
    DQTransformOutput["EvaluationResults"] = "EvaluationResults";
    DQTransformOutput["PrimaryInput"] = "PrimaryInput";
})(DQTransformOutput || (DQTransformOutput = {}));
export var DQStopJobOnFailureTiming;
(function (DQStopJobOnFailureTiming) {
    DQStopJobOnFailureTiming["AfterDataLoad"] = "AfterDataLoad";
    DQStopJobOnFailureTiming["Immediate"] = "Immediate";
})(DQStopJobOnFailureTiming || (DQStopJobOnFailureTiming = {}));
export var FilterOperation;
(function (FilterOperation) {
    FilterOperation["EQ"] = "EQ";
    FilterOperation["GT"] = "GT";
    FilterOperation["GTE"] = "GTE";
    FilterOperation["ISNULL"] = "ISNULL";
    FilterOperation["LT"] = "LT";
    FilterOperation["LTE"] = "LTE";
    FilterOperation["REGEX"] = "REGEX";
})(FilterOperation || (FilterOperation = {}));
export var FilterValueType;
(function (FilterValueType) {
    FilterValueType["COLUMNEXTRACTED"] = "COLUMNEXTRACTED";
    FilterValueType["CONSTANT"] = "CONSTANT";
})(FilterValueType || (FilterValueType = {}));
export var FilterLogicalOperator;
(function (FilterLogicalOperator) {
    FilterLogicalOperator["AND"] = "AND";
    FilterLogicalOperator["OR"] = "OR";
})(FilterLogicalOperator || (FilterLogicalOperator = {}));
export var UpdateCatalogBehavior;
(function (UpdateCatalogBehavior) {
    UpdateCatalogBehavior["LOG"] = "LOG";
    UpdateCatalogBehavior["UPDATE_IN_DATABASE"] = "UPDATE_IN_DATABASE";
})(UpdateCatalogBehavior || (UpdateCatalogBehavior = {}));
export var JDBCDataType;
(function (JDBCDataType) {
    JDBCDataType["ARRAY"] = "ARRAY";
    JDBCDataType["BIGINT"] = "BIGINT";
    JDBCDataType["BINARY"] = "BINARY";
    JDBCDataType["BIT"] = "BIT";
    JDBCDataType["BLOB"] = "BLOB";
    JDBCDataType["BOOLEAN"] = "BOOLEAN";
    JDBCDataType["CHAR"] = "CHAR";
    JDBCDataType["CLOB"] = "CLOB";
    JDBCDataType["DATALINK"] = "DATALINK";
    JDBCDataType["DATE"] = "DATE";
    JDBCDataType["DECIMAL"] = "DECIMAL";
    JDBCDataType["DISTINCT"] = "DISTINCT";
    JDBCDataType["DOUBLE"] = "DOUBLE";
    JDBCDataType["FLOAT"] = "FLOAT";
    JDBCDataType["INTEGER"] = "INTEGER";
    JDBCDataType["JAVA_OBJECT"] = "JAVA_OBJECT";
    JDBCDataType["LONGNVARCHAR"] = "LONGNVARCHAR";
    JDBCDataType["LONGVARBINARY"] = "LONGVARBINARY";
    JDBCDataType["LONGVARCHAR"] = "LONGVARCHAR";
    JDBCDataType["NCHAR"] = "NCHAR";
    JDBCDataType["NCLOB"] = "NCLOB";
    JDBCDataType["NULL"] = "NULL";
    JDBCDataType["NUMERIC"] = "NUMERIC";
    JDBCDataType["NVARCHAR"] = "NVARCHAR";
    JDBCDataType["OTHER"] = "OTHER";
    JDBCDataType["REAL"] = "REAL";
    JDBCDataType["REF"] = "REF";
    JDBCDataType["REF_CURSOR"] = "REF_CURSOR";
    JDBCDataType["ROWID"] = "ROWID";
    JDBCDataType["SMALLINT"] = "SMALLINT";
    JDBCDataType["SQLXML"] = "SQLXML";
    JDBCDataType["STRUCT"] = "STRUCT";
    JDBCDataType["TIME"] = "TIME";
    JDBCDataType["TIMESTAMP"] = "TIMESTAMP";
    JDBCDataType["TIMESTAMP_WITH_TIMEZONE"] = "TIMESTAMP_WITH_TIMEZONE";
    JDBCDataType["TIME_WITH_TIMEZONE"] = "TIME_WITH_TIMEZONE";
    JDBCDataType["TINYINT"] = "TINYINT";
    JDBCDataType["VARBINARY"] = "VARBINARY";
    JDBCDataType["VARCHAR"] = "VARCHAR";
})(JDBCDataType || (JDBCDataType = {}));
export var GlueRecordType;
(function (GlueRecordType) {
    GlueRecordType["BIGDECIMAL"] = "BIGDECIMAL";
    GlueRecordType["BYTE"] = "BYTE";
    GlueRecordType["DATE"] = "DATE";
    GlueRecordType["DOUBLE"] = "DOUBLE";
    GlueRecordType["FLOAT"] = "FLOAT";
    GlueRecordType["INT"] = "INT";
    GlueRecordType["LONG"] = "LONG";
    GlueRecordType["SHORT"] = "SHORT";
    GlueRecordType["STRING"] = "STRING";
    GlueRecordType["TIMESTAMP"] = "TIMESTAMP";
})(GlueRecordType || (GlueRecordType = {}));
export var JoinType;
(function (JoinType) {
    JoinType["EQUIJOIN"] = "equijoin";
    JoinType["LEFT"] = "left";
    JoinType["LEFT_ANTI"] = "leftanti";
    JoinType["LEFT_SEMI"] = "leftsemi";
    JoinType["OUTER"] = "outer";
    JoinType["RIGHT"] = "right";
})(JoinType || (JoinType = {}));
export var PiiType;
(function (PiiType) {
    PiiType["ColumnAudit"] = "ColumnAudit";
    PiiType["ColumnMasking"] = "ColumnMasking";
    PiiType["RowAudit"] = "RowAudit";
    PiiType["RowMasking"] = "RowMasking";
})(PiiType || (PiiType = {}));
export var CompressionType;
(function (CompressionType) {
    CompressionType["BZIP2"] = "bzip2";
    CompressionType["GZIP"] = "gzip";
})(CompressionType || (CompressionType = {}));
export var QuoteChar;
(function (QuoteChar) {
    QuoteChar["DISABLED"] = "disabled";
    QuoteChar["QUILLEMET"] = "quillemet";
    QuoteChar["QUOTE"] = "quote";
    QuoteChar["SINGLE_QUOTE"] = "single_quote";
})(QuoteChar || (QuoteChar = {}));
export var Separator;
(function (Separator) {
    Separator["COMMA"] = "comma";
    Separator["CTRLA"] = "ctrla";
    Separator["PIPE"] = "pipe";
    Separator["SEMICOLON"] = "semicolon";
    Separator["TAB"] = "tab";
})(Separator || (Separator = {}));
export var TargetFormat;
(function (TargetFormat) {
    TargetFormat["AVRO"] = "avro";
    TargetFormat["CSV"] = "csv";
    TargetFormat["HUDI"] = "hudi";
    TargetFormat["JSON"] = "json";
    TargetFormat["ORC"] = "orc";
    TargetFormat["PARQUET"] = "parquet";
})(TargetFormat || (TargetFormat = {}));
export var ParquetCompressionType;
(function (ParquetCompressionType) {
    ParquetCompressionType["GZIP"] = "gzip";
    ParquetCompressionType["LZO"] = "lzo";
    ParquetCompressionType["NONE"] = "none";
    ParquetCompressionType["SNAPPY"] = "snappy";
    ParquetCompressionType["UNCOMPRESSED"] = "uncompressed";
})(ParquetCompressionType || (ParquetCompressionType = {}));
export var HudiTargetCompressionType;
(function (HudiTargetCompressionType) {
    HudiTargetCompressionType["GZIP"] = "gzip";
    HudiTargetCompressionType["LZO"] = "lzo";
    HudiTargetCompressionType["SNAPPY"] = "snappy";
    HudiTargetCompressionType["UNCOMPRESSED"] = "uncompressed";
})(HudiTargetCompressionType || (HudiTargetCompressionType = {}));
export var UnionType;
(function (UnionType) {
    UnionType["ALL"] = "ALL";
    UnionType["DISTINCT"] = "DISTINCT";
})(UnionType || (UnionType = {}));
export var ExecutionClass;
(function (ExecutionClass) {
    ExecutionClass["FLEX"] = "FLEX";
    ExecutionClass["STANDARD"] = "STANDARD";
})(ExecutionClass || (ExecutionClass = {}));
export var SourceControlAuthStrategy;
(function (SourceControlAuthStrategy) {
    SourceControlAuthStrategy["AWS_SECRETS_MANAGER"] = "AWS_SECRETS_MANAGER";
    SourceControlAuthStrategy["PERSONAL_ACCESS_TOKEN"] = "PERSONAL_ACCESS_TOKEN";
})(SourceControlAuthStrategy || (SourceControlAuthStrategy = {}));
export var SourceControlProvider;
(function (SourceControlProvider) {
    SourceControlProvider["AWS_CODE_COMMIT"] = "AWS_CODE_COMMIT";
    SourceControlProvider["GITHUB"] = "GITHUB";
})(SourceControlProvider || (SourceControlProvider = {}));
export class InvalidStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
        this.Message = opts.Message;
    }
}
export var CrawlState;
(function (CrawlState) {
    CrawlState["CANCELLED"] = "CANCELLED";
    CrawlState["CANCELLING"] = "CANCELLING";
    CrawlState["ERROR"] = "ERROR";
    CrawlState["FAILED"] = "FAILED";
    CrawlState["RUNNING"] = "RUNNING";
    CrawlState["SUCCEEDED"] = "SUCCEEDED";
})(CrawlState || (CrawlState = {}));
export var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["EQUALS"] = "EQUALS";
})(LogicalOperator || (LogicalOperator = {}));
export var JobRunState;
(function (JobRunState) {
    JobRunState["ERROR"] = "ERROR";
    JobRunState["FAILED"] = "FAILED";
    JobRunState["RUNNING"] = "RUNNING";
    JobRunState["STARTING"] = "STARTING";
    JobRunState["STOPPED"] = "STOPPED";
    JobRunState["STOPPING"] = "STOPPING";
    JobRunState["SUCCEEDED"] = "SUCCEEDED";
    JobRunState["TIMEOUT"] = "TIMEOUT";
    JobRunState["WAITING"] = "WAITING";
})(JobRunState || (JobRunState = {}));
export var Logical;
(function (Logical) {
    Logical["AND"] = "AND";
    Logical["ANY"] = "ANY";
})(Logical || (Logical = {}));
export var TriggerState;
(function (TriggerState) {
    TriggerState["ACTIVATED"] = "ACTIVATED";
    TriggerState["ACTIVATING"] = "ACTIVATING";
    TriggerState["CREATED"] = "CREATED";
    TriggerState["CREATING"] = "CREATING";
    TriggerState["DEACTIVATED"] = "DEACTIVATED";
    TriggerState["DEACTIVATING"] = "DEACTIVATING";
    TriggerState["DELETING"] = "DELETING";
    TriggerState["UPDATING"] = "UPDATING";
})(TriggerState || (TriggerState = {}));
export var TriggerType;
(function (TriggerType) {
    TriggerType["CONDITIONAL"] = "CONDITIONAL";
    TriggerType["EVENT"] = "EVENT";
    TriggerType["ON_DEMAND"] = "ON_DEMAND";
    TriggerType["SCHEDULED"] = "SCHEDULED";
})(TriggerType || (TriggerType = {}));
export var NodeType;
(function (NodeType) {
    NodeType["CRAWLER"] = "CRAWLER";
    NodeType["JOB"] = "JOB";
    NodeType["TRIGGER"] = "TRIGGER";
})(NodeType || (NodeType = {}));
export var WorkflowRunStatus;
(function (WorkflowRunStatus) {
    WorkflowRunStatus["COMPLETED"] = "COMPLETED";
    WorkflowRunStatus["ERROR"] = "ERROR";
    WorkflowRunStatus["RUNNING"] = "RUNNING";
    WorkflowRunStatus["STOPPED"] = "STOPPED";
    WorkflowRunStatus["STOPPING"] = "STOPPING";
})(WorkflowRunStatus || (WorkflowRunStatus = {}));
export var TaskStatusType;
(function (TaskStatusType) {
    TaskStatusType["FAILED"] = "FAILED";
    TaskStatusType["RUNNING"] = "RUNNING";
    TaskStatusType["STARTING"] = "STARTING";
    TaskStatusType["STOPPED"] = "STOPPED";
    TaskStatusType["STOPPING"] = "STOPPING";
    TaskStatusType["SUCCEEDED"] = "SUCCEEDED";
    TaskStatusType["TIMEOUT"] = "TIMEOUT";
})(TaskStatusType || (TaskStatusType = {}));
export class IllegalSessionStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "IllegalSessionStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalSessionStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalSessionStateException.prototype);
        this.Message = opts.Message;
    }
}
export var DataFormat;
(function (DataFormat) {
    DataFormat["AVRO"] = "AVRO";
    DataFormat["JSON"] = "JSON";
    DataFormat["PROTOBUF"] = "PROTOBUF";
})(DataFormat || (DataFormat = {}));
export var CsvHeaderOption;
(function (CsvHeaderOption) {
    CsvHeaderOption["ABSENT"] = "ABSENT";
    CsvHeaderOption["PRESENT"] = "PRESENT";
    CsvHeaderOption["UNKNOWN"] = "UNKNOWN";
})(CsvHeaderOption || (CsvHeaderOption = {}));
export var ConnectionPropertyKey;
(function (ConnectionPropertyKey) {
    ConnectionPropertyKey["CONFIG_FILES"] = "CONFIG_FILES";
    ConnectionPropertyKey["CONNECTION_URL"] = "CONNECTION_URL";
    ConnectionPropertyKey["CONNECTOR_CLASS_NAME"] = "CONNECTOR_CLASS_NAME";
    ConnectionPropertyKey["CONNECTOR_TYPE"] = "CONNECTOR_TYPE";
    ConnectionPropertyKey["CONNECTOR_URL"] = "CONNECTOR_URL";
    ConnectionPropertyKey["CUSTOM_JDBC_CERT"] = "CUSTOM_JDBC_CERT";
    ConnectionPropertyKey["CUSTOM_JDBC_CERT_STRING"] = "CUSTOM_JDBC_CERT_STRING";
    ConnectionPropertyKey["ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD"] = "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD";
    ConnectionPropertyKey["ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD"] = "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD";
    ConnectionPropertyKey["ENCRYPTED_PASSWORD"] = "ENCRYPTED_PASSWORD";
    ConnectionPropertyKey["HOST"] = "HOST";
    ConnectionPropertyKey["INSTANCE_ID"] = "INSTANCE_ID";
    ConnectionPropertyKey["JDBC_CONNECTION_URL"] = "JDBC_CONNECTION_URL";
    ConnectionPropertyKey["JDBC_DRIVER_CLASS_NAME"] = "JDBC_DRIVER_CLASS_NAME";
    ConnectionPropertyKey["JDBC_DRIVER_JAR_URI"] = "JDBC_DRIVER_JAR_URI";
    ConnectionPropertyKey["JDBC_ENFORCE_SSL"] = "JDBC_ENFORCE_SSL";
    ConnectionPropertyKey["JDBC_ENGINE"] = "JDBC_ENGINE";
    ConnectionPropertyKey["JDBC_ENGINE_VERSION"] = "JDBC_ENGINE_VERSION";
    ConnectionPropertyKey["KAFKA_BOOTSTRAP_SERVERS"] = "KAFKA_BOOTSTRAP_SERVERS";
    ConnectionPropertyKey["KAFKA_CLIENT_KEYSTORE"] = "KAFKA_CLIENT_KEYSTORE";
    ConnectionPropertyKey["KAFKA_CLIENT_KEYSTORE_PASSWORD"] = "KAFKA_CLIENT_KEYSTORE_PASSWORD";
    ConnectionPropertyKey["KAFKA_CLIENT_KEY_PASSWORD"] = "KAFKA_CLIENT_KEY_PASSWORD";
    ConnectionPropertyKey["KAFKA_CUSTOM_CERT"] = "KAFKA_CUSTOM_CERT";
    ConnectionPropertyKey["KAFKA_SKIP_CUSTOM_CERT_VALIDATION"] = "KAFKA_SKIP_CUSTOM_CERT_VALIDATION";
    ConnectionPropertyKey["KAFKA_SSL_ENABLED"] = "KAFKA_SSL_ENABLED";
    ConnectionPropertyKey["PASSWORD"] = "PASSWORD";
    ConnectionPropertyKey["PORT"] = "PORT";
    ConnectionPropertyKey["SECRET_ID"] = "SECRET_ID";
    ConnectionPropertyKey["SKIP_CUSTOM_JDBC_CERT_VALIDATION"] = "SKIP_CUSTOM_JDBC_CERT_VALIDATION";
    ConnectionPropertyKey["USER_NAME"] = "USERNAME";
})(ConnectionPropertyKey || (ConnectionPropertyKey = {}));
export var ConnectionType;
(function (ConnectionType) {
    ConnectionType["CUSTOM"] = "CUSTOM";
    ConnectionType["JDBC"] = "JDBC";
    ConnectionType["KAFKA"] = "KAFKA";
    ConnectionType["MARKETPLACE"] = "MARKETPLACE";
    ConnectionType["MONGODB"] = "MONGODB";
    ConnectionType["NETWORK"] = "NETWORK";
    ConnectionType["SFTP"] = "SFTP";
})(ConnectionType || (ConnectionType = {}));
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export class ConcurrentModificationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
        this.Message = opts.Message;
    }
}
export var Permission;
(function (Permission) {
    Permission["ALL"] = "ALL";
    Permission["ALTER"] = "ALTER";
    Permission["CREATE_DATABASE"] = "CREATE_DATABASE";
    Permission["CREATE_TABLE"] = "CREATE_TABLE";
    Permission["DATA_LOCATION_ACCESS"] = "DATA_LOCATION_ACCESS";
    Permission["DELETE"] = "DELETE";
    Permission["DROP"] = "DROP";
    Permission["INSERT"] = "INSERT";
    Permission["SELECT"] = "SELECT";
})(Permission || (Permission = {}));
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export var TransformType;
(function (TransformType) {
    TransformType["FIND_MATCHES"] = "FIND_MATCHES";
})(TransformType || (TransformType = {}));
export var MLUserDataEncryptionModeString;
(function (MLUserDataEncryptionModeString) {
    MLUserDataEncryptionModeString["DISABLED"] = "DISABLED";
    MLUserDataEncryptionModeString["SSEKMS"] = "SSE-KMS";
})(MLUserDataEncryptionModeString || (MLUserDataEncryptionModeString = {}));
export var Compatibility;
(function (Compatibility) {
    Compatibility["BACKWARD"] = "BACKWARD";
    Compatibility["BACKWARD_ALL"] = "BACKWARD_ALL";
    Compatibility["DISABLED"] = "DISABLED";
    Compatibility["FORWARD"] = "FORWARD";
    Compatibility["FORWARD_ALL"] = "FORWARD_ALL";
    Compatibility["FULL"] = "FULL";
    Compatibility["FULL_ALL"] = "FULL_ALL";
    Compatibility["NONE"] = "NONE";
})(Compatibility || (Compatibility = {}));
export var SchemaStatus;
(function (SchemaStatus) {
    SchemaStatus["AVAILABLE"] = "AVAILABLE";
    SchemaStatus["DELETING"] = "DELETING";
    SchemaStatus["PENDING"] = "PENDING";
})(SchemaStatus || (SchemaStatus = {}));
export var SchemaVersionStatus;
(function (SchemaVersionStatus) {
    SchemaVersionStatus["AVAILABLE"] = "AVAILABLE";
    SchemaVersionStatus["DELETING"] = "DELETING";
    SchemaVersionStatus["FAILURE"] = "FAILURE";
    SchemaVersionStatus["PENDING"] = "PENDING";
})(SchemaVersionStatus || (SchemaVersionStatus = {}));
export const NotificationPropertyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ActionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AggregateOperationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AggregateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GlueStudioSchemaColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GlueSchemaFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AthenaConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const AuditContextFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SchemaIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SchemaReferenceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SerDeInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SkewedInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const OrderFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StorageDescriptorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PartitionInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchCreatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ErrorDetailFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PartitionErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchCreatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteConnectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PartitionValueListFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeletePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeletePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TableErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteTableVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TableVersionErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchDeleteTableVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetBlueprintsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LastActiveDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BlueprintFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetBlueprintsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetCrawlersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LakeFormationConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LastCrawlInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const LineageConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecrawlPolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ScheduleFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeltaTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DynamoDBTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JdbcTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MongoDBTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3TargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CrawlerTargetsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CrawlerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetCrawlersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetCustomEntityTypesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CustomEntityTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetCustomEntityTypesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetDataQualityResultRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GlueTableFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataQualityRuleResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataQualityResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetDataQualityResultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetDevEndpointsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DevEndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetDevEndpointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetJobsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogHudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StreamingDataPreviewOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const KafkaStreamingSourceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogKafkaSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const KinesisStreamingSourceOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogKinesisSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BasicCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CustomCodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DirectJDBCSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DirectKafkaSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DirectKinesisSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DropDuplicatesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DropFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NullCheckBoxListFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DatatypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NullValueFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DropNullFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TransformConfigParameterFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DynamicTransformFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DynamoDBCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DQResultsPublishingOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DQStopJobOnFailureOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EvaluateDataQualityFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FillMissingValuesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilterValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilterExpressionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FilterFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3SourceAdditionalOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GovernedCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CatalogSchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const GovernedCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JDBCConnectorOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JDBCConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JDBCConnectorTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JoinColumnFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JoinFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MergeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MicrosoftSQLServerCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MicrosoftSQLServerCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MySQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MySQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const OracleSQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const OracleSQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PIIDetectionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PostgreSQLCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PostgreSQLCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RedshiftSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpsertRedshiftTargetOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RedshiftTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RelationalCatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RenameFieldFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3CatalogHudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3CatalogSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3CatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3DirectSourceAdditionalOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3CsvSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DirectSchemaChangePolicyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3DirectTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3GlueParquetTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3HudiCatalogTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3HudiDirectTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3HudiSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3JsonSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3ParquetSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SelectFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SelectFromCollectionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SparkConnectorSourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SparkConnectorTargetFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SqlAliasFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SparkSQLFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SpigotFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SplitFieldsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UnionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JobCommandFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ConnectionsListFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ExecutionPropertyFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const SourceControlDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetPartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PartitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetPartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetTriggersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EventBatchingConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredicateFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TriggerFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetTriggersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetWorkflowsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BlueprintDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EdgeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CrawlFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CrawlerNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PredecessorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JobRunFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const JobNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TriggerNodeDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const NodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WorkflowGraphFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const StartingEventBatchConditionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WorkflowRunStatisticsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WorkflowRunFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WorkflowFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchGetWorkflowsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchStopJobRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchStopJobRunErrorFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchStopJobRunSuccessfulSubmissionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchStopJobRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchUpdatePartitionRequestEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchUpdatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchUpdatePartitionFailureEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const BatchUpdatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelDataQualityRuleRecommendationRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelDataQualityRuleRecommendationRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelDataQualityRulesetEvaluationRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelDataQualityRulesetEvaluationRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelMLTaskRunRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelMLTaskRunResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelStatementRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CancelStatementResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CheckSchemaVersionValidityInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CheckSchemaVersionValidityResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateBlueprintRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateBlueprintResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateCsvClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateGrokClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateJsonClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateXMLClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateClassifierRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateClassifierResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PhysicalConnectionRequirementsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ConnectionInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateConnectionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateCrawlerRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateCrawlerResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateCustomEntityTypeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateCustomEntityTypeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataLakePrincipalFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PrincipalPermissionsFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DatabaseIdentifierFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DatabaseInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DataQualityTargetTableFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDataQualityRulesetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDataQualityRulesetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDevEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDevEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const FindMatchesParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TransformParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MLUserDataEncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TransformEncryptionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateMLTransformRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateMLTransformResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreatePartitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreatePartitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const PartitionIndexFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreatePartitionIndexRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreatePartitionIndexResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateRegistryInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateRegistryResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RegistryIdFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateSchemaInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateSchemaResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CodeGenEdgeFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CodeGenNodeArgFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CodeGenNodeFilterSensitiveLog = (obj) => ({
    ...obj,
});
